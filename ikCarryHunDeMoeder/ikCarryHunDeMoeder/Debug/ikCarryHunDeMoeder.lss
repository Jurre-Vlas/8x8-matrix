
ikCarryHunDeMoeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000059c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080017a  0080017a  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001911  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a92  00000000  00000000  00002119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000add  00000000  00000000  00002bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057d  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000537  00000000  00000000  00003e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000433c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 37       	cpi	r26, 0x7A	; 122
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e7       	ldi	r26, 0x7A	; 122
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 37       	cpi	r26, 0x7E	; 126
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a2 d0       	rcall	.+324    	; 0x208 <main>
  c4:	69 c2       	rjmp	.+1234   	; 0x598 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <goodBad>:
int pressedB1 = 0;
int pressedB2 = 0;



void goodBad(int goodOrBad){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	clear();
  ce:	4b d1       	rcall	.+662    	; 0x366 <clear>
	set_cursor(5);
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	68 d1       	rcall	.+720    	; 0x3a6 <set_cursor>
	display_text("3");
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	48 d1       	rcall	.+656    	; 0x36c <display_text>
	wait(1000);
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	f8 d0       	rcall	.+496    	; 0x2d2 <wait>
	set_cursor(5);
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	5f d1       	rcall	.+702    	; 0x3a6 <set_cursor>
	display_text("2");
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	3f d1       	rcall	.+638    	; 0x36c <display_text>
	wait(1000);
  ee:	88 ee       	ldi	r24, 0xE8	; 232
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	ef d0       	rcall	.+478    	; 0x2d2 <wait>
	set_cursor(5);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	56 d1       	rcall	.+684    	; 0x3a6 <set_cursor>
	display_text("1");
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	36 d1       	rcall	.+620    	; 0x36c <display_text>
	
	wait(500);
 100:	84 ef       	ldi	r24, 0xF4	; 244
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	e6 d0       	rcall	.+460    	; 0x2d2 <wait>
	
	set_cursor(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	4d d1       	rcall	.+666    	; 0x3a6 <set_cursor>
 10c:	20 97       	sbiw	r28, 0x00	; 0
	
	
	if(goodOrBad){
 10e:	b1 f0       	breq	.+44     	; 0x13c <goodBad+0x74>
 110:	81 e0       	ldi	r24, 0x01	; 1
		decision(1);
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	a5 d1       	rcall	.+842    	; 0x460 <decision>
 116:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
		questionAsked--;
 11a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 124:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 128:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
		counter++;
 12c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <counter+0x1>
 136:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <counter>
 13a:	17 c0       	rjmp	.+46     	; 0x16a <goodBad+0xa2>
 13c:	cd 2b       	or	r28, r29
	} else if(!goodOrBad){
 13e:	a9 f4       	brne	.+42     	; 0x16a <goodBad+0xa2>
 140:	80 e0       	ldi	r24, 0x00	; 0
		decision(0);
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	8d d1       	rcall	.+794    	; 0x460 <decision>
 146:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
		questionAsked--;
 14a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 154:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 158:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
		counter++;
 15c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <counter+0x1>
 166:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <counter>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
	}
	
}
 16e:	08 95       	ret

00000170 <questions>:
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15




void questions(char *vraag1, char *antwoord1, char *antwoord2, int nummer ){
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	7b 01       	movw	r14, r22
 17e:	8a 01       	movw	r16, r20
 180:	e9 01       	movw	r28, r18
	
	display_text(vraag1);
 182:	f4 d0       	rcall	.+488    	; 0x36c <display_text>
	set_cursor(40);
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e d1       	rcall	.+540    	; 0x3a6 <set_cursor>
	
	display_text(antwoord1);
 18a:	c7 01       	movw	r24, r14
 18c:	ef d0       	rcall	.+478    	; 0x36c <display_text>

	set_cursor(50);
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	09 d1       	rcall	.+530    	; 0x3a6 <set_cursor>
	display_text(antwoord2);
 194:	c8 01       	movw	r24, r16
 196:	ea d0       	rcall	.+468    	; 0x36c <display_text>
 198:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
	
	if (questionAsked == 0){
 19c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	29 f5       	brne	.+74     	; 0x1ee <questions+0x7e>
 1a4:	01 96       	adiw	r24, 0x01	; 1
		questionAsked++;
 1a6:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 1aa:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 1ae:	1f c0       	rjmp	.+62     	; 0x1ee <questions+0x7e>
 1b0:	b1 9b       	sbis	0x16, 1	; 22
	}
	
	while (questionAsked)
	{
		if (PINB & 0x02 && !nummer )
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <questions+0x50>
 1b4:	20 97       	sbiw	r28, 0x00	; 0
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <questions+0x50>
		{
			goodBad(0);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	85 df       	rcall	.-246    	; 0xc8 <goodBad>
 1be:	17 c0       	rjmp	.+46     	; 0x1ee <questions+0x7e>
 1c0:	b1 9b       	sbis	0x16, 1	; 22
			
			
		} else if (PINB & 0x02 && nummer)
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <questions+0x60>
 1c4:	20 97       	sbiw	r28, 0x00	; 0
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <questions+0x60>
		{
				goodBad(1);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	7d df       	rcall	.-262    	; 0xc8 <goodBad>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <questions+0x7e>
			
		}	else if (PINB & 0x04 && !nummer)
 1d0:	b2 9b       	sbis	0x16, 2	; 22
 1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <questions+0x70>
 1d4:	20 97       	sbiw	r28, 0x00	; 0
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <questions+0x70>
		{
				goodBad(1);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	75 df       	rcall	.-278    	; 0xc8 <goodBad>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <questions+0x7e>
			
		}	else if (PINB & 0x04 && nummer)
 1e0:	b2 9b       	sbis	0x16, 2	; 22
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <questions+0x7e>
 1e4:	20 97       	sbiw	r28, 0x00	; 0
 1e6:	19 f0       	breq	.+6      	; 0x1ee <questions+0x7e>
		{
				goodBad(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	6d df       	rcall	.-294    	; 0xc8 <goodBad>
 1ee:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
	
	if (questionAsked == 0){
		questionAsked++;
	}
	
	while (questionAsked)
 1f2:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 1f6:	89 2b       	or	r24, r25
 1f8:	d9 f6       	brne	.-74     	; 0x1b0 <questions+0x40>
 1fa:	df 91       	pop	r29
		{
				goodBad(0);
		} 
	}
	
}
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <main>:
 208:	fe d0       	rcall	.+508    	; 0x406 <start_init>
int main( void )
{
	
	start_init();
	
	DDRA = 0xFF;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x01;
 20e:	81 e0       	ldi	r24, 0x01	; 1
	init();
 210:	8b bb       	out	0x1b, r24	; 27
	
	clear();
 212:	bb d0       	rcall	.+374    	; 0x38a <init>
	

	display_text("welkom, druk op");
 214:	a8 d0       	rcall	.+336    	; 0x366 <clear>
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	91 e0       	ldi	r25, 0x01	; 1
	set_cursor(40);
 21a:	a8 d0       	rcall	.+336    	; 0x36c <display_text>
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	90 e0       	ldi	r25, 0x00	; 0
	display_text("B1 om te starten");
 220:	c2 d0       	rcall	.+388    	; 0x3a6 <set_cursor>
 222:	86 e1       	ldi	r24, 0x16	; 22
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	a2 d0       	rcall	.+324    	; 0x36c <display_text>
	
	PORTB = 0x00; 
 228:	18 ba       	out	0x18, r1	; 24


	while (1)
	{
		countToDecision();
 22a:	b4 d1       	rcall	.+872    	; 0x594 <countToDecision>
 22c:	b1 9b       	sbis	0x16, 1	; 22
		
		if (PINB & 0x02 && counter == 0){						// b2 indrukken dan komt hij hier in
 22e:	20 c0       	rjmp	.+64     	; 0x270 <main+0x68>
 230:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 234:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 238:	89 2b       	or	r24, r25
 23a:	d1 f4       	brne	.+52     	; 0x270 <main+0x68>
			clear();
 23c:	94 d0       	rcall	.+296    	; 0x366 <clear>
 23e:	20 e0       	ldi	r18, 0x00	; 0
			questions("Hoe heet ik?", "Jurre", "Jan", 0);
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	47 e2       	ldi	r20, 0x27	; 39
 244:	51 e0       	ldi	r21, 0x01	; 1
 246:	6b e2       	ldi	r22, 0x2B	; 43
 248:	71 e0       	ldi	r23, 0x01	; 1
 24a:	81 e3       	ldi	r24, 0x31	; 49
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	90 df       	rcall	.-224    	; 0x170 <questions>
			wait(1000);
 250:	88 ee       	ldi	r24, 0xE8	; 232
 252:	93 e0       	ldi	r25, 0x03	; 3
 254:	3e d0       	rcall	.+124    	; 0x2d2 <wait>
 256:	0c c0       	rjmp	.+24     	; 0x270 <main+0x68>
		} 
		
		while (counter == 1){						// b2 indrukken dan komt hij hier in
			questions("wat doe ik?", "TI", "BIM", 0);
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	4e e3       	ldi	r20, 0x3E	; 62
 25e:	51 e0       	ldi	r21, 0x01	; 1
 260:	62 e4       	ldi	r22, 0x42	; 66
 262:	71 e0       	ldi	r23, 0x01	; 1
 264:	85 e4       	ldi	r24, 0x45	; 69
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	83 df       	rcall	.-250    	; 0x170 <questions>
			wait(1000);
 26a:	88 ee       	ldi	r24, 0xE8	; 232
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	31 d0       	rcall	.+98     	; 0x2d2 <wait>
 270:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
			clear();
			questions("Hoe heet ik?", "Jurre", "Jan", 0);
			wait(1000);
		} 
		
		while (counter == 1){						// b2 indrukken dan komt hij hier in
 274:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	71 f3       	breq	.-36     	; 0x258 <main+0x50>
 27c:	0c c0       	rjmp	.+24     	; 0x296 <main+0x8e>
			questions("wat doe ik?", "TI", "BIM", 0);
			wait(1000);
		}
		
		while ( counter == 2){						// b2 indrukken dan komt hij hier in
			questions("wat is gezond?", "patat", "Peer", 1);
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	41 e5       	ldi	r20, 0x51	; 81
 284:	51 e0       	ldi	r21, 0x01	; 1
 286:	66 e5       	ldi	r22, 0x56	; 86
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	8c e5       	ldi	r24, 0x5C	; 92
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	70 df       	rcall	.-288    	; 0x170 <questions>
			wait(1000);
 290:	88 ee       	ldi	r24, 0xE8	; 232
 292:	93 e0       	ldi	r25, 0x03	; 3
 294:	1e d0       	rcall	.+60     	; 0x2d2 <wait>
		while (counter == 1){						// b2 indrukken dan komt hij hier in
			questions("wat doe ik?", "TI", "BIM", 0);
			wait(1000);
		}
		
		while ( counter == 2){						// b2 indrukken dan komt hij hier in
 296:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 29a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 29e:	02 97       	sbiw	r24, 0x02	; 2
 2a0:	71 f3       	breq	.-36     	; 0x27e <main+0x76>
 2a2:	10 c0       	rjmp	.+32     	; 0x2c4 <main+0xbc>
			wait(1000);
		}
		
			while (counter == 3)
		{
			clear();
 2a4:	60 d0       	rcall	.+192    	; 0x366 <clear>
 2a6:	88 ee       	ldi	r24, 0xE8	; 232
			wait(1000);
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	13 d0       	rcall	.+38     	; 0x2d2 <wait>
 2ac:	8b e6       	ldi	r24, 0x6B	; 107
 2ae:	91 e0       	ldi	r25, 0x01	; 1

			display_text("klaar is kees");
 2b0:	5d d0       	rcall	.+186    	; 0x36c <display_text>
 2b2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 2b6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
			counter++;
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <counter+0x1>
 2c0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <counter>
 2c4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 2c8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
		while ( counter == 2){						// b2 indrukken dan komt hij hier in
			questions("wat is gezond?", "patat", "Peer", 1);
			wait(1000);
		}
		
			while (counter == 3)
 2cc:	03 97       	sbiw	r24, 0x03	; 3
 2ce:	51 f3       	breq	.-44     	; 0x2a4 <main+0x9c>
 2d0:	ac cf       	rjmp	.-168    	; 0x22a <main+0x22>

000002d2 <wait>:
#include <stdint.h>
#include "lcd.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	ef ec       	ldi	r30, 0xCF	; 207
 2da:	f7 e0       	ldi	r31, 0x07	; 7
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <wait+0xa>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <wait+0x10>
 2e2:	00 00       	nop
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	ac f3       	brlt	.-22     	; 0x2d8 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 2ee:	08 95       	ret

000002f0 <blinkE>:

void blinkE(){
	//In order to confirm our command we need to blink the E pin.
	PORTC |= (1<<3);
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	88 60       	ori	r24, 0x08	; 8
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	8f ec       	ldi	r24, 0xCF	; 207
 2f8:	97 e0       	ldi	r25, 0x07	; 7
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <blinkE+0xa>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <blinkE+0x10>
 300:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<3);
 302:	85 b3       	in	r24, 0x15	; 21
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	85 bb       	out	0x15, r24	; 21
 308:	8f ec       	ldi	r24, 0xCF	; 207
 30a:	97 e0       	ldi	r25, 0x07	; 7
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <blinkE+0x1c>
 310:	00 c0       	rjmp	.+0      	; 0x312 <blinkE+0x22>
 312:	00 00       	nop
 314:	08 95       	ret

00000316 <displaySend>:
	_delay_ms(1);
}

void displaySend(char bytes, int rs){
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	18 2f       	mov	r17, r24
	// Command comes in as 8 bits
	// 1010 0101
	// First we send the left 4 bits (Upper nibble)
	// Then the right 4 bits (Lower nibble)

	if (rs) rs = 1; //RS defines if its a command or a character
 31e:	61 15       	cp	r22, r1
 320:	71 05       	cpc	r23, r1
 322:	11 f0       	breq	.+4      	; 0x328 <displaySend+0x12>
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	70 e0       	ldi	r23, 0x00	; 0
	
	// First nibble.
	PORTC = (bytes & 0xF0);
 328:	81 2f       	mov	r24, r17
 32a:	80 7f       	andi	r24, 0xF0	; 240
 32c:	85 bb       	out	0x15, r24	; 21
	PORTC |= (rs<<2);
 32e:	85 b3       	in	r24, 0x15	; 21
 330:	eb 01       	movw	r28, r22
 332:	cc 0f       	add	r28, r28
 334:	dd 1f       	adc	r29, r29
 336:	cc 0f       	add	r28, r28
 338:	dd 1f       	adc	r29, r29
 33a:	8c 2b       	or	r24, r28
 33c:	85 bb       	out	0x15, r24	; 21
	blinkE();
 33e:	d8 df       	rcall	.-80     	; 0x2f0 <blinkE>

	// Second nibble
	PORTC = (bytes << 4);
 340:	12 95       	swap	r17
 342:	10 7f       	andi	r17, 0xF0	; 240
 344:	15 bb       	out	0x15, r17	; 21
	PORTC |= (rs<<2);
 346:	65 b3       	in	r22, 0x15	; 21
 348:	6c 2b       	or	r22, r28
	blinkE();
 34a:	65 bb       	out	0x15, r22	; 21
 34c:	d1 df       	rcall	.-94     	; 0x2f0 <blinkE>
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	08 95       	ret

00000356 <charSend>:

void charSend(char character){
	displaySend(character, 1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	dd cf       	rjmp	.-70     	; 0x316 <displaySend>
 35c:	08 95       	ret

0000035e <cmdSend>:
}

void cmdSend(char cmd){
	displaySend(cmd, 0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	d9 cf       	rjmp	.-78     	; 0x316 <displaySend>
 364:	08 95       	ret

00000366 <clear>:
	cmdSend(0x06); 
	return_home();
}

void clear(){
	cmdSend(0x01);
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	fa cf       	rjmp	.-12     	; 0x35e <cmdSend>
 36a:	08 95       	ret

0000036c <display_text>:
}

void display_text(char *str){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
	for (; *str; str++)
 372:	02 c0       	rjmp	.+4      	; 0x378 <display_text+0xc>
	{
		charSend(*str);
 374:	f0 df       	rcall	.-32     	; 0x356 <charSend>
void clear(){
	cmdSend(0x01);
}

void display_text(char *str){
	for (; *str; str++)
 376:	21 96       	adiw	r28, 0x01	; 1
 378:	88 81       	ld	r24, Y
 37a:	81 11       	cpse	r24, r1
 37c:	fb cf       	rjmp	.-10     	; 0x374 <display_text+0x8>
	{
		charSend(*str);
	}
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <return_home>:

void return_home(){
	cmdSend(0x02);
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	eb cf       	rjmp	.-42     	; 0x35e <cmdSend>
 388:	08 95       	ret

0000038a <init>:
void cmdSend(char cmd){
	displaySend(cmd, 0);
}

void init(){
	DDRC = 0xFF;
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 38e:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x20;
 390:	80 e2       	ldi	r24, 0x20	; 32
 392:	85 bb       	out	0x15, r24	; 21
	blinkE();
 394:	ad df       	rcall	.-166    	; 0x2f0 <blinkE>

	cmdSend(0x28); 
 396:	88 e2       	ldi	r24, 0x28	; 40
 398:	e2 df       	rcall	.-60     	; 0x35e <cmdSend>
	cmdSend(0x0F); 
 39a:	8f e0       	ldi	r24, 0x0F	; 15
 39c:	e0 df       	rcall	.-64     	; 0x35e <cmdSend>
	cmdSend(0x06); 
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	de df       	rcall	.-68     	; 0x35e <cmdSend>
 3a2:	f0 cf       	rjmp	.-32     	; 0x384 <return_home>
	return_home();
 3a4:	08 95       	ret

000003a6 <set_cursor>:
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17

void return_home(){
	cmdSend(0x02);
}

void set_cursor(int position){
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	8c 01       	movw	r16, r24
	return_home();
 3b0:	e9 df       	rcall	.-46     	; 0x384 <return_home>
	for (int i = 0; i < position; i++)
 3b2:	c0 e0       	ldi	r28, 0x00	; 0
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <set_cursor+0x18>
	{
		cmdSend(0b00010100);
 3b8:	84 e1       	ldi	r24, 0x14	; 20
 3ba:	d1 df       	rcall	.-94     	; 0x35e <cmdSend>
	cmdSend(0x02);
}

void set_cursor(int position){
	return_home();
	for (int i = 0; i < position; i++)
 3bc:	21 96       	adiw	r28, 0x01	; 1
 3be:	c0 17       	cp	r28, r16
 3c0:	d1 07       	cpc	r29, r17
 3c2:	d4 f3       	brlt	.-12     	; 0x3b8 <set_cursor+0x12>
	{
		cmdSend(0b00010100);
	}

 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <twi_init>:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 3ce:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 3d2:	80 e2       	ldi	r24, 0x20	; 32
 3d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 3d8:	08 95       	ret

000003da <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 3da:	84 ea       	ldi	r24, 0xA4	; 164
 3dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 3e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3e4:	88 23       	and	r24, r24
 3e6:	e4 f7       	brge	.-8      	; 0x3e0 <twi_start+0x6>
}
 3e8:	08 95       	ret

000003ea <twi_stop>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 3ea:	84 e9       	ldi	r24, 0x94	; 148
 3ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3f0:	08 95       	ret

000003f2 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 3f2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 3f6:	84 e8       	ldi	r24, 0x84	; 132
 3f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 3fc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 400:	88 23       	and	r24, r24
 402:	e4 f7       	brge	.-8      	; 0x3fc <twi_tx+0xa>
}
 404:	08 95       	ret

00000406 <start_init>:





void start_init(void){
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
	
	twi_init();		// Init TWI interface
 40a:	e1 df       	rcall	.-62     	; 0x3ce <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 40c:	e6 df       	rcall	.-52     	; 0x3da <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 40e:	80 ee       	ldi	r24, 0xE0	; 224
 410:	f0 df       	rcall	.-32     	; 0x3f2 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 412:	81 e2       	ldi	r24, 0x21	; 33
 414:	ee df       	rcall	.-36     	; 0x3f2 <twi_tx>
	twi_stop();
 416:	e9 df       	rcall	.-46     	; 0x3ea <twi_stop>

	twi_start();
 418:	e0 df       	rcall	.-64     	; 0x3da <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 41a:	80 ee       	ldi	r24, 0xE0	; 224
 41c:	ea df       	rcall	.-44     	; 0x3f2 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 41e:	80 ea       	ldi	r24, 0xA0	; 160
	twi_stop();
 420:	e8 df       	rcall	.-48     	; 0x3f2 <twi_tx>

	twi_start();
 422:	e3 df       	rcall	.-58     	; 0x3ea <twi_stop>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 424:	da df       	rcall	.-76     	; 0x3da <twi_start>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 426:	80 ee       	ldi	r24, 0xE0	; 224
 428:	e4 df       	rcall	.-56     	; 0x3f2 <twi_tx>
	twi_stop();
 42a:	83 ee       	ldi	r24, 0xE3	; 227
 42c:	e2 df       	rcall	.-60     	; 0x3f2 <twi_tx>

	twi_start();
 42e:	dd df       	rcall	.-70     	; 0x3ea <twi_stop>
 430:	d4 df       	rcall	.-88     	; 0x3da <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 432:	80 ee       	ldi	r24, 0xE0	; 224
 434:	de df       	rcall	.-68     	; 0x3f2 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 436:	81 e8       	ldi	r24, 0x81	; 129
 438:	dc df       	rcall	.-72     	; 0x3f2 <twi_tx>
	twi_stop();
 43a:	d7 df       	rcall	.-82     	; 0x3ea <twi_stop>
 43c:	ce df       	rcall	.-100    	; 0x3da <twi_start>
	
	
	//dimming all leds
	twi_start();
 43e:	80 ee       	ldi	r24, 0xE0	; 224
 440:	d8 df       	rcall	.-80     	; 0x3f2 <twi_tx>
	twi_tx(0xE0);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	d6 df       	rcall	.-84     	; 0x3f2 <twi_tx>
 446:	c0 e0       	ldi	r28, 0x00	; 0
	twi_tx(0x00);
 448:	d0 e0       	ldi	r29, 0x00	; 0
 44a:	03 c0       	rjmp	.+6      	; 0x452 <start_init+0x4c>
 44c:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0; i < 16; i++){
 44e:	d1 df       	rcall	.-94     	; 0x3f2 <twi_tx>
 450:	21 96       	adiw	r28, 0x01	; 1
 452:	c0 31       	cpi	r28, 0x10	; 16
		twi_tx(0x00);	// data
 454:	d1 05       	cpc	r29, r1
 456:	d4 f3       	brlt	.-12     	; 0x44c <start_init+0x46>
 458:	c8 df       	rcall	.-112    	; 0x3ea <twi_stop>
	
	//dimming all leds
	twi_start();
	twi_tx(0xE0);
	twi_tx(0x00);
	for(int i=0; i < 16; i++){
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <decision>:
 460:	cf 93       	push	r28
		twi_tx(0x00);	// data
	}
	
	twi_stop();
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
	
	
}
 466:	b9 df       	rcall	.-142    	; 0x3da <twi_start>
 468:	80 ee       	ldi	r24, 0xE0	; 224
 46a:	c3 df       	rcall	.-122    	; 0x3f2 <twi_tx>

void decision(int good){
	
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x00);	// Row
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	c1 df       	rcall	.-126    	; 0x3f2 <twi_tx>
	twi_tx(0b0011110);	// data
 470:	8e e1       	ldi	r24, 0x1E	; 30
 472:	bf df       	rcall	.-130    	; 0x3f2 <twi_tx>
	twi_stop();
 474:	ba df       	rcall	.-140    	; 0x3ea <twi_stop>
	
	twi_start();
 476:	b1 df       	rcall	.-158    	; 0x3da <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 478:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x02);	// Row
 47a:	bb df       	rcall	.-138    	; 0x3f2 <twi_tx>
 47c:	82 e0       	ldi	r24, 0x02	; 2
	twi_tx(0b0100001);	// data
 47e:	b9 df       	rcall	.-142    	; 0x3f2 <twi_tx>
 480:	81 e2       	ldi	r24, 0x21	; 33
	twi_stop();
 482:	b7 df       	rcall	.-146    	; 0x3f2 <twi_tx>
	
	twi_start();
 484:	b2 df       	rcall	.-156    	; 0x3ea <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 486:	a9 df       	rcall	.-174    	; 0x3da <twi_start>
 488:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x04);	// Row
 48a:	b3 df       	rcall	.-154    	; 0x3f2 <twi_tx>
 48c:	84 e0       	ldi	r24, 0x04	; 4
	twi_tx(0b11010010);	// data
 48e:	b1 df       	rcall	.-158    	; 0x3f2 <twi_tx>
 490:	82 ed       	ldi	r24, 0xD2	; 210
	twi_stop();
 492:	af df       	rcall	.-162    	; 0x3f2 <twi_tx>
	
	
	twi_start();
 494:	aa df       	rcall	.-172    	; 0x3ea <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 496:	a1 df       	rcall	.-190    	; 0x3da <twi_start>
	twi_tx(0x06);	// Row
 498:	80 ee       	ldi	r24, 0xE0	; 224
 49a:	ab df       	rcall	.-170    	; 0x3f2 <twi_tx>
	twi_tx(0b11000000);	// data
 49c:	86 e0       	ldi	r24, 0x06	; 6
 49e:	a9 df       	rcall	.-174    	; 0x3f2 <twi_tx>
	twi_stop();
 4a0:	80 ec       	ldi	r24, 0xC0	; 192
	
	
	if (good){
 4a2:	a7 df       	rcall	.-178    	; 0x3f2 <twi_tx>
		twi_start();
 4a4:	a2 df       	rcall	.-188    	; 0x3ea <twi_stop>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4a6:	cd 2b       	or	r28, r29
 4a8:	89 f0       	breq	.+34     	; 0x4cc <decision+0x6c>
		twi_tx(0x08);	// Row
 4aa:	97 df       	rcall	.-210    	; 0x3da <twi_start>
 4ac:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0b11010010);	// data
 4ae:	a1 df       	rcall	.-190    	; 0x3f2 <twi_tx>
 4b0:	88 e0       	ldi	r24, 0x08	; 8
		twi_stop();
 4b2:	9f df       	rcall	.-194    	; 0x3f2 <twi_tx>
		
		twi_start();
 4b4:	82 ed       	ldi	r24, 0xD2	; 210
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4b6:	9d df       	rcall	.-198    	; 0x3f2 <twi_tx>
 4b8:	98 df       	rcall	.-208    	; 0x3ea <twi_stop>
		twi_tx(0x0A);	// Row
 4ba:	8f df       	rcall	.-226    	; 0x3da <twi_start>
 4bc:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0b11001100);	// data
 4be:	99 df       	rcall	.-206    	; 0x3f2 <twi_tx>
 4c0:	8a e0       	ldi	r24, 0x0A	; 10
		twi_stop();
 4c2:	97 df       	rcall	.-210    	; 0x3f2 <twi_tx>
 4c4:	8c ec       	ldi	r24, 0xCC	; 204
	}
	
	else{
		twi_start();
 4c6:	95 df       	rcall	.-214    	; 0x3f2 <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4c8:	90 df       	rcall	.-224    	; 0x3ea <twi_stop>
 4ca:	10 c0       	rjmp	.+32     	; 0x4ec <decision+0x8c>
 4cc:	86 df       	rcall	.-244    	; 0x3da <twi_start>
		twi_tx(0x08);	// Row
 4ce:	80 ee       	ldi	r24, 0xE0	; 224
 4d0:	90 df       	rcall	.-224    	; 0x3f2 <twi_tx>
 4d2:	88 e0       	ldi	r24, 0x08	; 8
		twi_tx(0b11001100);	// data
 4d4:	8e df       	rcall	.-228    	; 0x3f2 <twi_tx>
 4d6:	8c ec       	ldi	r24, 0xCC	; 204
 4d8:	8c df       	rcall	.-232    	; 0x3f2 <twi_tx>
		twi_stop();
 4da:	87 df       	rcall	.-242    	; 0x3ea <twi_stop>
 4dc:	7e df       	rcall	.-260    	; 0x3da <twi_start>
		
		twi_start();
 4de:	80 ee       	ldi	r24, 0xE0	; 224
 4e0:	88 df       	rcall	.-240    	; 0x3f2 <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	86 df       	rcall	.-244    	; 0x3f2 <twi_tx>
 4e6:	82 ed       	ldi	r24, 0xD2	; 210
		twi_tx(0x0A);	// Row
 4e8:	84 df       	rcall	.-248    	; 0x3f2 <twi_tx>
 4ea:	7f df       	rcall	.-258    	; 0x3ea <twi_stop>
 4ec:	76 df       	rcall	.-276    	; 0x3da <twi_start>
		twi_tx(0b11010010);	// data
 4ee:	80 ee       	ldi	r24, 0xE0	; 224
 4f0:	80 df       	rcall	.-256    	; 0x3f2 <twi_tx>
 4f2:	8c e0       	ldi	r24, 0x0C	; 12
		twi_stop();
 4f4:	7e df       	rcall	.-260    	; 0x3f2 <twi_tx>
 4f6:	81 e2       	ldi	r24, 0x21	; 33
		
	}
	
	
	twi_start();
 4f8:	7c df       	rcall	.-264    	; 0x3f2 <twi_tx>
 4fa:	77 df       	rcall	.-274    	; 0x3ea <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 4fc:	6e df       	rcall	.-292    	; 0x3da <twi_start>
 4fe:	80 ee       	ldi	r24, 0xE0	; 224
 500:	78 df       	rcall	.-272    	; 0x3f2 <twi_tx>
	twi_tx(0x0C);	// Row
 502:	8e e0       	ldi	r24, 0x0E	; 14
 504:	76 df       	rcall	.-276    	; 0x3f2 <twi_tx>
 506:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0b0100001);	// data
 508:	74 df       	rcall	.-280    	; 0x3f2 <twi_tx>
 50a:	6f df       	rcall	.-290    	; 0x3ea <twi_stop>
 50c:	df 91       	pop	r29
	twi_stop();
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <three>:
	
	twi_start();
 512:	63 df       	rcall	.-314    	; 0x3da <twi_start>
 514:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 516:	6d df       	rcall	.-294    	; 0x3f2 <twi_tx>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	6b df       	rcall	.-298    	; 0x3f2 <twi_tx>
	twi_tx(0x0E);	// Row
 51c:	8e e1       	ldi	r24, 0x1E	; 30
 51e:	69 df       	rcall	.-302    	; 0x3f2 <twi_tx>
 520:	64 df       	rcall	.-312    	; 0x3ea <twi_stop>
	twi_tx(0b0011110);	// data
 522:	5b df       	rcall	.-330    	; 0x3da <twi_start>
 524:	80 ee       	ldi	r24, 0xE0	; 224
 526:	65 df       	rcall	.-310    	; 0x3f2 <twi_tx>
	twi_stop();
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	63 df       	rcall	.-314    	; 0x3f2 <twi_tx>
}
 52c:	80 e1       	ldi	r24, 0x10	; 16
 52e:	61 df       	rcall	.-318    	; 0x3f2 <twi_tx>
 530:	5c df       	rcall	.-328    	; 0x3ea <twi_stop>
	twi_tx(0x02);	// Row
	twi_tx(0b0010000);	// data
	twi_stop();
	
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 532:	53 df       	rcall	.-346    	; 0x3da <twi_start>
 534:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x04);	// Row
 536:	5d df       	rcall	.-326    	; 0x3f2 <twi_tx>
	twi_tx(0b0010000);	// data;
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	5b df       	rcall	.-330    	; 0x3f2 <twi_tx>
	twi_stop();
 53c:	80 e1       	ldi	r24, 0x10	; 16
	
	
	twi_start();
 53e:	59 df       	rcall	.-334    	; 0x3f2 <twi_tx>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 540:	54 df       	rcall	.-344    	; 0x3ea <twi_stop>
 542:	4b df       	rcall	.-362    	; 0x3da <twi_start>
	twi_tx(0x06);	// Row
 544:	80 ee       	ldi	r24, 0xE0	; 224
 546:	55 df       	rcall	.-342    	; 0x3f2 <twi_tx>
	twi_tx(0b0011110);	// data
 548:	86 e0       	ldi	r24, 0x06	; 6
	twi_stop();
 54a:	53 df       	rcall	.-346    	; 0x3f2 <twi_tx>
	
	twi_start();
 54c:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 54e:	51 df       	rcall	.-350    	; 0x3f2 <twi_tx>
	twi_tx(0x08);	// Row
 550:	4c df       	rcall	.-360    	; 0x3ea <twi_stop>
 552:	43 df       	rcall	.-378    	; 0x3da <twi_start>
	twi_tx(0b0011110);	// data
 554:	80 ee       	ldi	r24, 0xE0	; 224
 556:	4d df       	rcall	.-358    	; 0x3f2 <twi_tx>
	twi_stop();
 558:	88 e0       	ldi	r24, 0x08	; 8
	
	
	twi_start();
 55a:	4b df       	rcall	.-362    	; 0x3f2 <twi_tx>
 55c:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 55e:	49 df       	rcall	.-366    	; 0x3f2 <twi_tx>
 560:	44 df       	rcall	.-376    	; 0x3ea <twi_stop>
 562:	3b df       	rcall	.-394    	; 0x3da <twi_start>
	twi_tx(0x0A);	// Row
 564:	80 ee       	ldi	r24, 0xE0	; 224
 566:	45 df       	rcall	.-374    	; 0x3f2 <twi_tx>
 568:	8a e0       	ldi	r24, 0x0A	; 10
	twi_tx(0b0010000);	// data
 56a:	43 df       	rcall	.-378    	; 0x3f2 <twi_tx>
 56c:	80 e1       	ldi	r24, 0x10	; 16
 56e:	41 df       	rcall	.-382    	; 0x3f2 <twi_tx>
	twi_stop();
 570:	3c df       	rcall	.-392    	; 0x3ea <twi_stop>
 572:	33 df       	rcall	.-410    	; 0x3da <twi_start>
	
	twi_start();
 574:	80 ee       	ldi	r24, 0xE0	; 224
 576:	3d df       	rcall	.-390    	; 0x3f2 <twi_tx>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	3b df       	rcall	.-394    	; 0x3f2 <twi_tx>
 57c:	80 e1       	ldi	r24, 0x10	; 16
	twi_tx(0x0C);	// Row
 57e:	39 df       	rcall	.-398    	; 0x3f2 <twi_tx>
 580:	34 df       	rcall	.-408    	; 0x3ea <twi_stop>
 582:	2b df       	rcall	.-426    	; 0x3da <twi_start>
	twi_tx(0b0010000);	// data;
 584:	80 ee       	ldi	r24, 0xE0	; 224
 586:	35 df       	rcall	.-406    	; 0x3f2 <twi_tx>
 588:	8e e0       	ldi	r24, 0x0E	; 14
	twi_stop();
 58a:	33 df       	rcall	.-410    	; 0x3f2 <twi_tx>
 58c:	8e e1       	ldi	r24, 0x1E	; 30
	
	
	twi_start();
 58e:	31 df       	rcall	.-414    	; 0x3f2 <twi_tx>
 590:	2c cf       	rjmp	.-424    	; 0x3ea <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 592:	08 95       	ret

00000594 <countToDecision>:
 594:	be cf       	rjmp	.-132    	; 0x512 <three>
 596:	08 95       	ret

00000598 <_exit>:
	twi_tx(0x0E);	// Row
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
