
ikCarryHunDeMoeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080017a  0080017a  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000165e  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7c  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c8  00000000  00000000  0000284a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000604  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000537  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003f2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 37       	cpi	r26, 0x7A	; 122
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e7       	ldi	r26, 0x7A	; 122
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 37       	cpi	r26, 0x7E	; 126
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	20 d1       	rcall	.+576    	; 0x304 <main>
  c4:	25 c2       	rjmp	.+1098   	; 0x510 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
#include <stdint.h>
#include "lcd.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	08 c0       	rjmp	.+16     	; 0xde <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef ec       	ldi	r30, 0xCF	; 207
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wait+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wait+0x10>
  d8:	00 00       	nop
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	ac f3       	brlt	.-22     	; 0xce <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  e4:	08 95       	ret

000000e6 <blinkE>:

void blinkE(){
	//In order to confirm our command we need to blink the E pin.
	PORTC |= (1<<3);
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <blinkE+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <blinkE+0x10>
  f6:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<3);
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	8f ec       	ldi	r24, 0xCF	; 207
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <blinkE+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <blinkE+0x22>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <displaySend>:
	_delay_ms(1);
}

void displaySend(char bytes, int rs){
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	18 2f       	mov	r17, r24
	// Command comes in as 8 bits
	// 1010 0101
	// First we send the left 4 bits (Upper nibble)
	// Then the right 4 bits (Lower nibble)

	if (rs) rs = 1; //RS defines if its a command or a character
 114:	61 15       	cp	r22, r1
 116:	71 05       	cpc	r23, r1
 118:	11 f0       	breq	.+4      	; 0x11e <displaySend+0x12>
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	70 e0       	ldi	r23, 0x00	; 0
	
	// First nibble.
	PORTC = (bytes & 0xF0);
 11e:	81 2f       	mov	r24, r17
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	85 bb       	out	0x15, r24	; 21
	PORTC |= (rs<<2);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	eb 01       	movw	r28, r22
 128:	cc 0f       	add	r28, r28
 12a:	dd 1f       	adc	r29, r29
 12c:	cc 0f       	add	r28, r28
 12e:	dd 1f       	adc	r29, r29
 130:	8c 2b       	or	r24, r28
 132:	85 bb       	out	0x15, r24	; 21
	blinkE();
 134:	d8 df       	rcall	.-80     	; 0xe6 <blinkE>

	// Second nibble
	PORTC = (bytes << 4);
 136:	12 95       	swap	r17
 138:	10 7f       	andi	r17, 0xF0	; 240
 13a:	15 bb       	out	0x15, r17	; 21
	PORTC |= (rs<<2);
 13c:	65 b3       	in	r22, 0x15	; 21
 13e:	6c 2b       	or	r22, r28
	blinkE();
 140:	65 bb       	out	0x15, r22	; 21
 142:	d1 df       	rcall	.-94     	; 0xe6 <blinkE>
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	08 95       	ret

0000014c <charSend>:

void charSend(char character){
	displaySend(character, 1);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	dd cf       	rjmp	.-70     	; 0x10c <displaySend>
 152:	08 95       	ret

00000154 <cmdSend>:
}

void cmdSend(char cmd){
	displaySend(cmd, 0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	d9 cf       	rjmp	.-78     	; 0x10c <displaySend>
 15a:	08 95       	ret

0000015c <clear>:
	cmdSend(0x06);
	return_home();
}

void clear(){
	cmdSend(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	fa cf       	rjmp	.-12     	; 0x154 <cmdSend>
 160:	08 95       	ret

00000162 <display_text>:
}

void display_text(char *str){
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
	for (; *str; str++)
 168:	02 c0       	rjmp	.+4      	; 0x16e <display_text+0xc>
	{
		charSend(*str);
 16a:	f0 df       	rcall	.-32     	; 0x14c <charSend>
void clear(){
	cmdSend(0x01);
}

void display_text(char *str){
	for (; *str; str++)
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	88 81       	ld	r24, Y
 170:	81 11       	cpse	r24, r1
 172:	fb cf       	rjmp	.-10     	; 0x16a <display_text+0x8>
	{
		charSend(*str);
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <return_home>:

void return_home(){
	cmdSend(0x02);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	eb cf       	rjmp	.-42     	; 0x154 <cmdSend>
 17e:	08 95       	ret

00000180 <init>:
void cmdSend(char cmd){
	displaySend(cmd, 0);
}

void init(){
	DDRC = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 184:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x20;
 186:	80 e2       	ldi	r24, 0x20	; 32
 188:	85 bb       	out	0x15, r24	; 21
	blinkE();
 18a:	ad df       	rcall	.-166    	; 0xe6 <blinkE>

	cmdSend(0x28);
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	e2 df       	rcall	.-60     	; 0x154 <cmdSend>
	cmdSend(0x0F);
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	e0 df       	rcall	.-64     	; 0x154 <cmdSend>
	cmdSend(0x06);
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	de df       	rcall	.-68     	; 0x154 <cmdSend>
 198:	f0 cf       	rjmp	.-32     	; 0x17a <return_home>
	return_home();
 19a:	08 95       	ret

0000019c <set_cursor>:
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17

void return_home(){
	cmdSend(0x02);
}

void set_cursor(int position){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	8c 01       	movw	r16, r24
	return_home();
 1a6:	e9 df       	rcall	.-46     	; 0x17a <return_home>
	for (int i = 0; i < position; i++)
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <set_cursor+0x18>
	{
		cmdSend(0b00010100);
 1ae:	84 e1       	ldi	r24, 0x14	; 20
 1b0:	d1 df       	rcall	.-94     	; 0x154 <cmdSend>
	cmdSend(0x02);
}

void set_cursor(int position){
	return_home();
	for (int i = 0; i < position; i++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	c0 17       	cp	r28, r16
 1b6:	d1 07       	cpc	r29, r17
 1b8:	d4 f3       	brlt	.-12     	; 0x1ae <set_cursor+0x12>
	{
		cmdSend(0b00010100);
	}

 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <goodBad>:
int pressedB1 = 0;
int pressedB2 = 0;



void goodBad(int goodOrBad){
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
	clear();
 1ca:	c8 df       	rcall	.-112    	; 0x15c <clear>
	set_cursor(5);
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e5 df       	rcall	.-54     	; 0x19c <set_cursor>
	display_text("3");
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	c5 df       	rcall	.-118    	; 0x162 <display_text>
	wait(1000);
 1d8:	88 ee       	ldi	r24, 0xE8	; 232
 1da:	93 e0       	ldi	r25, 0x03	; 3
 1dc:	75 df       	rcall	.-278    	; 0xc8 <wait>
	set_cursor(5);
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	dc df       	rcall	.-72     	; 0x19c <set_cursor>
	display_text("2");
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	bc df       	rcall	.-136    	; 0x162 <display_text>
	wait(1000);
 1ea:	88 ee       	ldi	r24, 0xE8	; 232
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	6c df       	rcall	.-296    	; 0xc8 <wait>
	set_cursor(5);
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	d3 df       	rcall	.-90     	; 0x19c <set_cursor>
	display_text("1");
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	b3 df       	rcall	.-154    	; 0x162 <display_text>
	
	wait(500);
 1fc:	84 ef       	ldi	r24, 0xF4	; 244
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	63 df       	rcall	.-314    	; 0xc8 <wait>
	
	set_cursor(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ca df       	rcall	.-108    	; 0x19c <set_cursor>
 208:	20 97       	sbiw	r28, 0x00	; 0
	
	
	if(goodOrBad){
 20a:	b1 f0       	breq	.+44     	; 0x238 <goodBad+0x74>
 20c:	81 e0       	ldi	r24, 0x01	; 1
		decision(1);
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	26 d1       	rcall	.+588    	; 0x45e <decision>
 212:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
		questionAsked--;
 216:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 220:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 224:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
		counter++;
 228:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <counter+0x1>
 232:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <counter>
 236:	17 c0       	rjmp	.+46     	; 0x266 <goodBad+0xa2>
 238:	cd 2b       	or	r28, r29
	} else if(!goodOrBad){
 23a:	a9 f4       	brne	.+42     	; 0x266 <goodBad+0xa2>
 23c:	80 e0       	ldi	r24, 0x00	; 0
		decision(0);
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e d1       	rcall	.+540    	; 0x45e <decision>
 242:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
		questionAsked--;
 246:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 250:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 254:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
		counter++;
 258:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <counter+0x1>
 262:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <counter>
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
	}
	
}
 26a:	08 95       	ret

0000026c <questions>:
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15




void questions(char *vraag1, char *antwoord1, char *antwoord2, int nummer ){
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	7b 01       	movw	r14, r22
 27a:	8a 01       	movw	r16, r20
 27c:	e9 01       	movw	r28, r18
	
	display_text(vraag1);
 27e:	71 df       	rcall	.-286    	; 0x162 <display_text>
	set_cursor(40);
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	8b df       	rcall	.-234    	; 0x19c <set_cursor>
	
	display_text(antwoord1);
 286:	c7 01       	movw	r24, r14
 288:	6c df       	rcall	.-296    	; 0x162 <display_text>

	set_cursor(50);
 28a:	82 e3       	ldi	r24, 0x32	; 50
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	86 df       	rcall	.-244    	; 0x19c <set_cursor>
	display_text(antwoord2);
 290:	c8 01       	movw	r24, r16
 292:	67 df       	rcall	.-306    	; 0x162 <display_text>
 294:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
	
	if (questionAsked == 0){
 298:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	29 f5       	brne	.+74     	; 0x2ea <questions+0x7e>
 2a0:	01 96       	adiw	r24, 0x01	; 1
		questionAsked++;
 2a2:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 2a6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 2aa:	1f c0       	rjmp	.+62     	; 0x2ea <questions+0x7e>
 2ac:	b1 9b       	sbis	0x16, 1	; 22
	}
	
	while (questionAsked)
	{
		if (PINB & 0x02 && !nummer )
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <questions+0x50>
 2b0:	20 97       	sbiw	r28, 0x00	; 0
 2b2:	21 f4       	brne	.+8      	; 0x2bc <questions+0x50>
		{
			goodBad(0);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	85 df       	rcall	.-246    	; 0x1c4 <goodBad>
 2ba:	17 c0       	rjmp	.+46     	; 0x2ea <questions+0x7e>
 2bc:	b1 9b       	sbis	0x16, 1	; 22
			
			
		} else if (PINB & 0x02 && nummer)
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <questions+0x60>
 2c0:	20 97       	sbiw	r28, 0x00	; 0
 2c2:	21 f0       	breq	.+8      	; 0x2cc <questions+0x60>
		{
				goodBad(1);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	7d df       	rcall	.-262    	; 0x1c4 <goodBad>
 2ca:	0f c0       	rjmp	.+30     	; 0x2ea <questions+0x7e>
			
		}	else if (PINB & 0x04 && !nummer)
 2cc:	b2 9b       	sbis	0x16, 2	; 22
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <questions+0x70>
 2d0:	20 97       	sbiw	r28, 0x00	; 0
 2d2:	21 f4       	brne	.+8      	; 0x2dc <questions+0x70>
		{
				goodBad(1);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	75 df       	rcall	.-278    	; 0x1c4 <goodBad>
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <questions+0x7e>
			
		}	else if (PINB & 0x04 && nummer)
 2dc:	b2 9b       	sbis	0x16, 2	; 22
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <questions+0x7e>
 2e0:	20 97       	sbiw	r28, 0x00	; 0
 2e2:	19 f0       	breq	.+6      	; 0x2ea <questions+0x7e>
		{
				goodBad(0);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	6d df       	rcall	.-294    	; 0x1c4 <goodBad>
 2ea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
	
	if (questionAsked == 0){
		questionAsked++;
	}
	
	while (questionAsked)
 2ee:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 2f2:	89 2b       	or	r24, r25
 2f4:	d9 f6       	brne	.-74     	; 0x2ac <questions+0x40>
 2f6:	df 91       	pop	r29
		{
				goodBad(0);
		} 
	}
	
}
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	08 95       	ret

00000304 <main>:
 304:	7f d0       	rcall	.+254    	; 0x404 <start_init>
int main( void )
{
	
	start_init();
	
	DDRA = 0xFF;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x01;
 30a:	81 e0       	ldi	r24, 0x01	; 1
	init();
 30c:	8b bb       	out	0x1b, r24	; 27
	
	clear();
 30e:	38 df       	rcall	.-400    	; 0x180 <init>
	

	display_text("welkom, druk op");
 310:	25 df       	rcall	.-438    	; 0x15c <clear>
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	91 e0       	ldi	r25, 0x01	; 1
	set_cursor(40);
 316:	25 df       	rcall	.-438    	; 0x162 <display_text>
 318:	88 e2       	ldi	r24, 0x28	; 40
 31a:	90 e0       	ldi	r25, 0x00	; 0
	display_text("B1 om te starten");
 31c:	3f df       	rcall	.-386    	; 0x19c <set_cursor>
 31e:	86 e1       	ldi	r24, 0x16	; 22
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	1f df       	rcall	.-450    	; 0x162 <display_text>
	
	PORTB = 0x00; 
 324:	18 ba       	out	0x18, r1	; 24


	while (1)
	{
		if (PINB & 0x02 && counter == 0){						// b2 indrukken dan komt hij hier in
 326:	b1 9b       	sbis	0x16, 1	; 22
 328:	20 c0       	rjmp	.+64     	; 0x36a <main+0x66>
 32a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 32e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 332:	89 2b       	or	r24, r25
			clear();
 334:	d1 f4       	brne	.+52     	; 0x36a <main+0x66>
 336:	12 df       	rcall	.-476    	; 0x15c <clear>
			questions("Hoe heet ik?", "Jurre", "Jan", 0);
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	47 e2       	ldi	r20, 0x27	; 39
 33e:	51 e0       	ldi	r21, 0x01	; 1
 340:	6b e2       	ldi	r22, 0x2B	; 43
 342:	71 e0       	ldi	r23, 0x01	; 1
 344:	81 e3       	ldi	r24, 0x31	; 49
 346:	91 e0       	ldi	r25, 0x01	; 1
			wait(1000);
 348:	91 df       	rcall	.-222    	; 0x26c <questions>
 34a:	88 ee       	ldi	r24, 0xE8	; 232
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	bc de       	rcall	.-648    	; 0xc8 <wait>
		} 
		
		while (counter == 1){						// b2 indrukken dan komt hij hier in
			questions("wat doe ik?", "TI", "BIM", 0);
 350:	0c c0       	rjmp	.+24     	; 0x36a <main+0x66>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	4e e3       	ldi	r20, 0x3E	; 62
 358:	51 e0       	ldi	r21, 0x01	; 1
 35a:	62 e4       	ldi	r22, 0x42	; 66
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	85 e4       	ldi	r24, 0x45	; 69
 360:	91 e0       	ldi	r25, 0x01	; 1
			wait(1000);
 362:	84 df       	rcall	.-248    	; 0x26c <questions>
 364:	88 ee       	ldi	r24, 0xE8	; 232
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	af de       	rcall	.-674    	; 0xc8 <wait>
			clear();
			questions("Hoe heet ik?", "Jurre", "Jan", 0);
			wait(1000);
		} 
		
		while (counter == 1){						// b2 indrukken dan komt hij hier in
 36a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 36e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	71 f3       	breq	.-36     	; 0x352 <main+0x4e>
			questions("wat doe ik?", "TI", "BIM", 0);
			wait(1000);
		}
		
		while ( counter == 2){						// b2 indrukken dan komt hij hier in
			questions("wat is gezond?", "patat", "Peer", 1);
 376:	0c c0       	rjmp	.+24     	; 0x390 <main+0x8c>
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	41 e5       	ldi	r20, 0x51	; 81
 37e:	51 e0       	ldi	r21, 0x01	; 1
 380:	66 e5       	ldi	r22, 0x56	; 86
 382:	71 e0       	ldi	r23, 0x01	; 1
 384:	8c e5       	ldi	r24, 0x5C	; 92
			wait(1000);
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	71 df       	rcall	.-286    	; 0x26c <questions>
 38a:	88 ee       	ldi	r24, 0xE8	; 232
		while (counter == 1){						// b2 indrukken dan komt hij hier in
			questions("wat doe ik?", "TI", "BIM", 0);
			wait(1000);
		}
		
		while ( counter == 2){						// b2 indrukken dan komt hij hier in
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	9c de       	rcall	.-712    	; 0xc8 <wait>
 390:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 394:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
			wait(1000);
		}
		
			while (counter == 3)
		{
			clear();
 398:	02 97       	sbiw	r24, 0x02	; 2
 39a:	71 f3       	breq	.-36     	; 0x378 <main+0x74>
			wait(1000);
 39c:	10 c0       	rjmp	.+32     	; 0x3be <main+0xba>
 39e:	de de       	rcall	.-580    	; 0x15c <clear>
 3a0:	88 ee       	ldi	r24, 0xE8	; 232
 3a2:	93 e0       	ldi	r25, 0x03	; 3

			display_text("klaar is kees");
 3a4:	91 de       	rcall	.-734    	; 0xc8 <wait>
 3a6:	8b e6       	ldi	r24, 0x6B	; 107
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	db de       	rcall	.-586    	; 0x162 <display_text>
			counter++;
 3ac:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 3b0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <counter+0x1>
 3ba:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <counter>
		while ( counter == 2){						// b2 indrukken dan komt hij hier in
			questions("wat is gezond?", "patat", "Peer", 1);
			wait(1000);
		}
		
			while (counter == 3)
 3be:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <counter>
 3c2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <counter+0x1>
 3c6:	03 97       	sbiw	r24, 0x03	; 3
 3c8:	51 f3       	breq	.-44     	; 0x39e <main+0x9a>
 3ca:	ad cf       	rjmp	.-166    	; 0x326 <main+0x22>

000003cc <twi_init>:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 3cc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 3d0:	80 e2       	ldi	r24, 0x20	; 32
 3d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 3d6:	08 95       	ret

000003d8 <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 3d8:	84 ea       	ldi	r24, 0xA4	; 164
 3da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 3de:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3e2:	88 23       	and	r24, r24
 3e4:	e4 f7       	brge	.-8      	; 0x3de <twi_start+0x6>
}
 3e6:	08 95       	ret

000003e8 <twi_stop>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 3e8:	84 e9       	ldi	r24, 0x94	; 148
 3ea:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3ee:	08 95       	ret

000003f0 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 3f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 3f4:	84 e8       	ldi	r24, 0x84	; 132
 3f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 3fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3fe:	88 23       	and	r24, r24
 400:	e4 f7       	brge	.-8      	; 0x3fa <twi_tx+0xa>
}
 402:	08 95       	ret

00000404 <start_init>:





void start_init(void){
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
	
	twi_init();		// Init TWI interface
 408:	e1 df       	rcall	.-62     	; 0x3cc <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 40a:	e6 df       	rcall	.-52     	; 0x3d8 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 40c:	80 ee       	ldi	r24, 0xE0	; 224
 40e:	f0 df       	rcall	.-32     	; 0x3f0 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 410:	81 e2       	ldi	r24, 0x21	; 33
 412:	ee df       	rcall	.-36     	; 0x3f0 <twi_tx>
	twi_stop();
 414:	e9 df       	rcall	.-46     	; 0x3e8 <twi_stop>

	twi_start();
 416:	e0 df       	rcall	.-64     	; 0x3d8 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 418:	80 ee       	ldi	r24, 0xE0	; 224
 41a:	ea df       	rcall	.-44     	; 0x3f0 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 41c:	80 ea       	ldi	r24, 0xA0	; 160
	twi_stop();
 41e:	e8 df       	rcall	.-48     	; 0x3f0 <twi_tx>

	twi_start();
 420:	e3 df       	rcall	.-58     	; 0x3e8 <twi_stop>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 422:	da df       	rcall	.-76     	; 0x3d8 <twi_start>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 424:	80 ee       	ldi	r24, 0xE0	; 224
 426:	e4 df       	rcall	.-56     	; 0x3f0 <twi_tx>
	twi_stop();
 428:	83 ee       	ldi	r24, 0xE3	; 227
 42a:	e2 df       	rcall	.-60     	; 0x3f0 <twi_tx>

	twi_start();
 42c:	dd df       	rcall	.-70     	; 0x3e8 <twi_stop>
 42e:	d4 df       	rcall	.-88     	; 0x3d8 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 430:	80 ee       	ldi	r24, 0xE0	; 224
 432:	de df       	rcall	.-68     	; 0x3f0 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 434:	81 e8       	ldi	r24, 0x81	; 129
 436:	dc df       	rcall	.-72     	; 0x3f0 <twi_tx>
	twi_stop();
 438:	d7 df       	rcall	.-82     	; 0x3e8 <twi_stop>
 43a:	ce df       	rcall	.-100    	; 0x3d8 <twi_start>
	
	
	//dimming all leds
	twi_start();
 43c:	80 ee       	ldi	r24, 0xE0	; 224
 43e:	d8 df       	rcall	.-80     	; 0x3f0 <twi_tx>
	twi_tx(0xE0);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	d6 df       	rcall	.-84     	; 0x3f0 <twi_tx>
 444:	c0 e0       	ldi	r28, 0x00	; 0
	twi_tx(0x00);
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	03 c0       	rjmp	.+6      	; 0x450 <start_init+0x4c>
 44a:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0; i < 16; i++){
 44c:	d1 df       	rcall	.-94     	; 0x3f0 <twi_tx>
 44e:	21 96       	adiw	r28, 0x01	; 1
 450:	c0 31       	cpi	r28, 0x10	; 16
		twi_tx(0x00);	// data
 452:	d1 05       	cpc	r29, r1
 454:	d4 f3       	brlt	.-12     	; 0x44a <start_init+0x46>
 456:	c8 df       	rcall	.-112    	; 0x3e8 <twi_stop>
	
	//dimming all leds
	twi_start();
	twi_tx(0xE0);
	twi_tx(0x00);
	for(int i=0; i < 16; i++){
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <decision>:
 45e:	cf 93       	push	r28
		twi_tx(0x00);	// data
	}
	
	twi_stop();
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
	
	
}
 464:	b9 df       	rcall	.-142    	; 0x3d8 <twi_start>
 466:	80 ee       	ldi	r24, 0xE0	; 224
 468:	c3 df       	rcall	.-122    	; 0x3f0 <twi_tx>

void decision(int good){
	
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x00);	// Row
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	c1 df       	rcall	.-126    	; 0x3f0 <twi_tx>
	twi_tx(0b0011110);	// data
 46e:	8e e1       	ldi	r24, 0x1E	; 30
 470:	bf df       	rcall	.-130    	; 0x3f0 <twi_tx>
	twi_stop();
 472:	ba df       	rcall	.-140    	; 0x3e8 <twi_stop>
	
	twi_start();
 474:	b1 df       	rcall	.-158    	; 0x3d8 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 476:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x02);	// Row
 478:	bb df       	rcall	.-138    	; 0x3f0 <twi_tx>
 47a:	82 e0       	ldi	r24, 0x02	; 2
	twi_tx(0b0100001);	// data
 47c:	b9 df       	rcall	.-142    	; 0x3f0 <twi_tx>
 47e:	81 e2       	ldi	r24, 0x21	; 33
	twi_stop();
 480:	b7 df       	rcall	.-146    	; 0x3f0 <twi_tx>
	
	twi_start();
 482:	b2 df       	rcall	.-156    	; 0x3e8 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 484:	a9 df       	rcall	.-174    	; 0x3d8 <twi_start>
 486:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x04);	// Row
 488:	b3 df       	rcall	.-154    	; 0x3f0 <twi_tx>
 48a:	84 e0       	ldi	r24, 0x04	; 4
	twi_tx(0b11010010);	// data
 48c:	b1 df       	rcall	.-158    	; 0x3f0 <twi_tx>
 48e:	82 ed       	ldi	r24, 0xD2	; 210
	twi_stop();
 490:	af df       	rcall	.-162    	; 0x3f0 <twi_tx>
	
	
	twi_start();
 492:	aa df       	rcall	.-172    	; 0x3e8 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 494:	a1 df       	rcall	.-190    	; 0x3d8 <twi_start>
	twi_tx(0x06);	// Row
 496:	80 ee       	ldi	r24, 0xE0	; 224
 498:	ab df       	rcall	.-170    	; 0x3f0 <twi_tx>
	twi_tx(0b11000000);	// data
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	a9 df       	rcall	.-174    	; 0x3f0 <twi_tx>
	twi_stop();
 49e:	80 ec       	ldi	r24, 0xC0	; 192
	
	
	if (good){
 4a0:	a7 df       	rcall	.-178    	; 0x3f0 <twi_tx>
		twi_start();
 4a2:	a2 df       	rcall	.-188    	; 0x3e8 <twi_stop>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4a4:	cd 2b       	or	r28, r29
 4a6:	89 f0       	breq	.+34     	; 0x4ca <decision+0x6c>
		twi_tx(0x08);	// Row
 4a8:	97 df       	rcall	.-210    	; 0x3d8 <twi_start>
 4aa:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0b11010010);	// data
 4ac:	a1 df       	rcall	.-190    	; 0x3f0 <twi_tx>
 4ae:	88 e0       	ldi	r24, 0x08	; 8
		twi_stop();
 4b0:	9f df       	rcall	.-194    	; 0x3f0 <twi_tx>
		
		twi_start();
 4b2:	82 ed       	ldi	r24, 0xD2	; 210
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4b4:	9d df       	rcall	.-198    	; 0x3f0 <twi_tx>
 4b6:	98 df       	rcall	.-208    	; 0x3e8 <twi_stop>
		twi_tx(0x0A);	// Row
 4b8:	8f df       	rcall	.-226    	; 0x3d8 <twi_start>
 4ba:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0b11001100);	// data
 4bc:	99 df       	rcall	.-206    	; 0x3f0 <twi_tx>
 4be:	8a e0       	ldi	r24, 0x0A	; 10
		twi_stop();
 4c0:	97 df       	rcall	.-210    	; 0x3f0 <twi_tx>
 4c2:	8c ec       	ldi	r24, 0xCC	; 204
	}
	
	else{
		twi_start();
 4c4:	95 df       	rcall	.-214    	; 0x3f0 <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4c6:	90 df       	rcall	.-224    	; 0x3e8 <twi_stop>
 4c8:	10 c0       	rjmp	.+32     	; 0x4ea <decision+0x8c>
 4ca:	86 df       	rcall	.-244    	; 0x3d8 <twi_start>
		twi_tx(0x08);	// Row
 4cc:	80 ee       	ldi	r24, 0xE0	; 224
 4ce:	90 df       	rcall	.-224    	; 0x3f0 <twi_tx>
 4d0:	88 e0       	ldi	r24, 0x08	; 8
		twi_tx(0b11001100);	// data
 4d2:	8e df       	rcall	.-228    	; 0x3f0 <twi_tx>
 4d4:	8c ec       	ldi	r24, 0xCC	; 204
 4d6:	8c df       	rcall	.-232    	; 0x3f0 <twi_tx>
		twi_stop();
 4d8:	87 df       	rcall	.-242    	; 0x3e8 <twi_stop>
 4da:	7e df       	rcall	.-260    	; 0x3d8 <twi_start>
		
		twi_start();
 4dc:	80 ee       	ldi	r24, 0xE0	; 224
 4de:	88 df       	rcall	.-240    	; 0x3f0 <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4e0:	8a e0       	ldi	r24, 0x0A	; 10
 4e2:	86 df       	rcall	.-244    	; 0x3f0 <twi_tx>
 4e4:	82 ed       	ldi	r24, 0xD2	; 210
		twi_tx(0x0A);	// Row
 4e6:	84 df       	rcall	.-248    	; 0x3f0 <twi_tx>
 4e8:	7f df       	rcall	.-258    	; 0x3e8 <twi_stop>
 4ea:	76 df       	rcall	.-276    	; 0x3d8 <twi_start>
		twi_tx(0b11010010);	// data
 4ec:	80 ee       	ldi	r24, 0xE0	; 224
 4ee:	80 df       	rcall	.-256    	; 0x3f0 <twi_tx>
 4f0:	8c e0       	ldi	r24, 0x0C	; 12
		twi_stop();
 4f2:	7e df       	rcall	.-260    	; 0x3f0 <twi_tx>
 4f4:	81 e2       	ldi	r24, 0x21	; 33
		
	}
	
	
	twi_start();
 4f6:	7c df       	rcall	.-264    	; 0x3f0 <twi_tx>
 4f8:	77 df       	rcall	.-274    	; 0x3e8 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 4fa:	6e df       	rcall	.-292    	; 0x3d8 <twi_start>
 4fc:	80 ee       	ldi	r24, 0xE0	; 224
 4fe:	78 df       	rcall	.-272    	; 0x3f0 <twi_tx>
	twi_tx(0x0C);	// Row
 500:	8e e0       	ldi	r24, 0x0E	; 14
 502:	76 df       	rcall	.-276    	; 0x3f0 <twi_tx>
 504:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0b0100001);	// data
 506:	74 df       	rcall	.-280    	; 0x3f0 <twi_tx>
 508:	6f df       	rcall	.-290    	; 0x3e8 <twi_stop>
 50a:	df 91       	pop	r29
	twi_stop();
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <_exit>:
	
	twi_start();
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
