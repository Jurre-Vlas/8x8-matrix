
ikCarryHunDeMoeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000006ce  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800182  00800182  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d32  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae7  00000000  00000000  0000267a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce1  00000000  00000000  00003161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00003e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000537  00000000  00000000  000045bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004af6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 38       	cpi	r26, 0x82	; 130
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e8       	ldi	r26, 0x82	; 130
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 38       	cpi	r26, 0x86	; 134
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9c d0       	rcall	.+312    	; 0x1fc <main>
  c4:	02 c3       	rjmp	.+1540   	; 0x6ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <questions>:
int pressedB1 = 0;
int pressedB2 = 0;



void questions(char *vraag1, char *antwoord1, char *antwoord2, int nummer ){
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	7b 01       	movw	r14, r22
  d6:	8a 01       	movw	r16, r20
  d8:	e9 01       	movw	r28, r18
	
	display_text(vraag1);
  da:	4d d1       	rcall	.+666    	; 0x376 <display_text>
	set_cursor(40);
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	67 d1       	rcall	.+718    	; 0x3b0 <set_cursor>
	
	display_text(antwoord1);
  e2:	c7 01       	movw	r24, r14
  e4:	48 d1       	rcall	.+656    	; 0x376 <display_text>

	set_cursor(50);
  e6:	82 e3       	ldi	r24, 0x32	; 50
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	62 d1       	rcall	.+708    	; 0x3b0 <set_cursor>
	display_text(antwoord2);
  ec:	c8 01       	movw	r24, r16
  ee:	43 d1       	rcall	.+646    	; 0x376 <display_text>
  f0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
	
	if (questionAsked == 0){
  f4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	09 f0       	breq	.+2      	; 0xfe <questions+0x36>
  fc:	71 c0       	rjmp	.+226    	; 0x1e0 <questions+0x118>
  fe:	01 96       	adiw	r24, 0x01	; 1
		questionAsked++;
 100:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
 104:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 108:	6b c0       	rjmp	.+214    	; 0x1e0 <questions+0x118>
	}
	
	while (questionAsked)
	{
		if (PINB & 0x02 && !nummer )
 10a:	b1 9b       	sbis	0x16, 1	; 22
 10c:	19 c0       	rjmp	.+50     	; 0x140 <questions+0x78>
 10e:	20 97       	sbiw	r28, 0x00	; 0
		{
			clear();
 110:	b9 f4       	brne	.+46     	; 0x140 <questions+0x78>
 112:	2e d1       	rcall	.+604    	; 0x370 <clear>
			countToDecision(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	c4 d2       	rcall	.+1416   	; 0x6a2 <countToDecision>
 11a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
			questionAsked--;
 11e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
 128:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 12c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
			counter++;
 130:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <counter+0x1>
 13a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter>
 13e:	50 c0       	rjmp	.+160    	; 0x1e0 <questions+0x118>
			
			
		} else if (PINB & 0x02 && nummer)
 140:	b1 9b       	sbis	0x16, 1	; 22
 142:	19 c0       	rjmp	.+50     	; 0x176 <questions+0xae>
 144:	20 97       	sbiw	r28, 0x00	; 0
		{
				clear();
 146:	b9 f0       	breq	.+46     	; 0x176 <questions+0xae>
 148:	13 d1       	rcall	.+550    	; 0x370 <clear>
				countToDecision(1);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	a9 d2       	rcall	.+1362   	; 0x6a2 <countToDecision>
 150:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
				questionAsked--;
 154:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
 15e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 162:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
				counter++;
 166:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <counter+0x1>
 170:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter>
			
		}	else if (PINB & 0x04 && !nummer)
 174:	35 c0       	rjmp	.+106    	; 0x1e0 <questions+0x118>
 176:	b2 9b       	sbis	0x16, 2	; 22
 178:	19 c0       	rjmp	.+50     	; 0x1ac <questions+0xe4>
 17a:	20 97       	sbiw	r28, 0x00	; 0
		{
				clear();
 17c:	b9 f4       	brne	.+46     	; 0x1ac <questions+0xe4>
 17e:	f8 d0       	rcall	.+496    	; 0x370 <clear>
				countToDecision(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	8e d2       	rcall	.+1308   	; 0x6a2 <countToDecision>
 186:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
				questionAsked--;
 18a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
 194:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 198:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
				counter++;
 19c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <counter+0x1>
 1a6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter>
			
		}	else if (PINB & 0x04 && nummer)
 1aa:	1a c0       	rjmp	.+52     	; 0x1e0 <questions+0x118>
 1ac:	b2 9b       	sbis	0x16, 2	; 22
 1ae:	18 c0       	rjmp	.+48     	; 0x1e0 <questions+0x118>
 1b0:	20 97       	sbiw	r28, 0x00	; 0
		{
				clear();
 1b2:	b1 f0       	breq	.+44     	; 0x1e0 <questions+0x118>
 1b4:	dd d0       	rcall	.+442    	; 0x370 <clear>
				countToDecision(0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	73 d2       	rcall	.+1254   	; 0x6a2 <countToDecision>
 1bc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
				questionAsked--;
 1c0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
 1ca:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 1ce:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
				counter++;
 1d2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <counter+0x1>
 1dc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter>
 1e0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
	
	if (questionAsked == 0){
		questionAsked++;
	}
	
	while (questionAsked)
 1e4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
 1e8:	89 2b       	or	r24, r25
 1ea:	09 f0       	breq	.+2      	; 0x1ee <questions+0x126>
 1ec:	8e cf       	rjmp	.-228    	; 0x10a <questions+0x42>
 1ee:	df 91       	pop	r29
				questionAsked--;
				counter++;
		} 
	}
	
}
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	08 95       	ret

000001fc <main>:
 1fc:	09 d1       	rcall	.+530    	; 0x410 <start_init>
int main( void )
{
	
	start_init();
	
	DDRA = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x01;
 202:	81 e0       	ldi	r24, 0x01	; 1
	init();
 204:	8b bb       	out	0x1b, r24	; 27
 206:	c6 d0       	rcall	.+396    	; 0x394 <init>
	
	DDRB = 0x08;
 208:	88 e0       	ldi	r24, 0x08	; 8

	clear();
 20a:	87 bb       	out	0x17, r24	; 23
	

	display_text("welkom, druk op");
 20c:	b1 d0       	rcall	.+354    	; 0x370 <clear>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	91 e0       	ldi	r25, 0x01	; 1
	set_cursor(40);
 212:	b1 d0       	rcall	.+354    	; 0x376 <display_text>
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	90 e0       	ldi	r25, 0x00	; 0
	display_text("B1 om te starten");
 218:	cb d0       	rcall	.+406    	; 0x3b0 <set_cursor>
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	ab d0       	rcall	.+342    	; 0x376 <display_text>
	
	PORTB = 0x00; 
 220:	18 ba       	out	0x18, r1	; 24


	while (1)
	{
		
		if (PINB & 0x02 && counter == 0){						//vraag 1
 222:	b1 9b       	sbis	0x16, 1	; 22
 224:	1d c0       	rjmp	.+58     	; 0x260 <main+0x64>
 226:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
 22a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 22e:	89 2b       	or	r24, r25
			clear();
 230:	b9 f4       	brne	.+46     	; 0x260 <main+0x64>
 232:	9e d0       	rcall	.+316    	; 0x370 <clear>
			questions("Hoe heet ik?", "Jurre", "Jan", 0);
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	41 e2       	ldi	r20, 0x21	; 33
 23a:	51 e0       	ldi	r21, 0x01	; 1
 23c:	65 e2       	ldi	r22, 0x25	; 37
 23e:	71 e0       	ldi	r23, 0x01	; 1
 240:	8b e2       	ldi	r24, 0x2B	; 43
 242:	91 e0       	ldi	r25, 0x01	; 1
			wait(1000);
 244:	41 df       	rcall	.-382    	; 0xc8 <questions>
 246:	88 ee       	ldi	r24, 0xE8	; 232
 248:	93 e0       	ldi	r25, 0x03	; 3
 24a:	48 d0       	rcall	.+144    	; 0x2dc <wait>
		} 
		
		while (counter == 1){									//vraag 2
			questions("wat doe ik?", "TI", "BIM", 0);
 24c:	09 c0       	rjmp	.+18     	; 0x260 <main+0x64>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	48 e3       	ldi	r20, 0x38	; 56
 254:	51 e0       	ldi	r21, 0x01	; 1
 256:	6c e3       	ldi	r22, 0x3C	; 60
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	34 df       	rcall	.-408    	; 0xc8 <questions>
			clear();
			questions("Hoe heet ik?", "Jurre", "Jan", 0);
			wait(1000);
		} 
		
		while (counter == 1){									//vraag 2
 260:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
 264:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	89 f3       	breq	.-30     	; 0x24e <main+0x52>
			questions("wat doe ik?", "TI", "BIM", 0);
		}
		
		while ( counter == 2){									//vraag 3
			questions("wat is gezond?", "patat", "Peer", 1);
 26c:	09 c0       	rjmp	.+18     	; 0x280 <main+0x84>
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	4b e4       	ldi	r20, 0x4B	; 75
 274:	51 e0       	ldi	r21, 0x01	; 1
 276:	60 e5       	ldi	r22, 0x50	; 80
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	86 e5       	ldi	r24, 0x56	; 86
 27c:	91 e0       	ldi	r25, 0x01	; 1
		
		while (counter == 1){									//vraag 2
			questions("wat doe ik?", "TI", "BIM", 0);
		}
		
		while ( counter == 2){									//vraag 3
 27e:	24 df       	rcall	.-440    	; 0xc8 <questions>
 280:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
 284:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
			questions("wat is gezond?", "patat", "Peer", 1);
		}
		
			while (counter == 3)
		{
			clear();
 288:	02 97       	sbiw	r24, 0x02	; 2
 28a:	89 f3       	breq	.-30     	; 0x26e <main+0x72>
			display_text("klaar is kees");
 28c:	13 c0       	rjmp	.+38     	; 0x2b4 <main+0xb8>
 28e:	70 d0       	rcall	.+224    	; 0x370 <clear>
 290:	85 e6       	ldi	r24, 0x65	; 101
 292:	91 e0       	ldi	r25, 0x01	; 1
			set_cursor(40);
 294:	70 d0       	rcall	.+224    	; 0x376 <display_text>
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	8a d0       	rcall	.+276    	; 0x3b0 <set_cursor>
			display_text("restart op B1");
 29c:	83 e7       	ldi	r24, 0x73	; 115
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	6a d0       	rcall	.+212    	; 0x376 <display_text>
 2a2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
			counter++;
 2a6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <counter+0x1>
 2b0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter>
 2b4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
		
		while ( counter == 2){									//vraag 3
			questions("wat is gezond?", "patat", "Peer", 1);
		}
		
			while (counter == 3)
 2b8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 2bc:	03 97       	sbiw	r24, 0x03	; 3
 2be:	39 f3       	breq	.-50     	; 0x28e <main+0x92>
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <main+0xd2>
 2c2:	b1 9b       	sbis	0x16, 1	; 22
			set_cursor(40);
			display_text("restart op B1");
			counter++;
		}
			while(counter == 4){
				if(PINB & 0x02){
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <main+0xd2>
 2c6:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <counter+0x1>
					counter = 0;
 2ca:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <counter>
 2ce:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
			display_text("klaar is kees");
			set_cursor(40);
			display_text("restart op B1");
			counter++;
		}
			while(counter == 4){
 2d2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter+0x1>
 2d6:	04 97       	sbiw	r24, 0x04	; 4
 2d8:	a1 f3       	breq	.-24     	; 0x2c2 <main+0xc6>
 2da:	a3 cf       	rjmp	.-186    	; 0x222 <main+0x26>

000002dc <wait>:
#include <stdint.h>
#include "lcd.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	ef ec       	ldi	r30, 0xCF	; 207
 2e4:	f7 e0       	ldi	r31, 0x07	; 7
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <wait+0xa>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <wait+0x10>
 2ec:	00 00       	nop
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	ac f3       	brlt	.-22     	; 0x2e2 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 2f8:	08 95       	ret

000002fa <blinkE>:

void blinkE(){
	//In order to confirm our command we need to blink the E pin.
	PORTC |= (1<<3);
 2fa:	85 b3       	in	r24, 0x15	; 21
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	85 bb       	out	0x15, r24	; 21
 300:	8f ec       	ldi	r24, 0xCF	; 207
 302:	97 e0       	ldi	r25, 0x07	; 7
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <blinkE+0xa>
 308:	00 c0       	rjmp	.+0      	; 0x30a <blinkE+0x10>
 30a:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<3);
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	87 7f       	andi	r24, 0xF7	; 247
 310:	85 bb       	out	0x15, r24	; 21
 312:	8f ec       	ldi	r24, 0xCF	; 207
 314:	97 e0       	ldi	r25, 0x07	; 7
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <blinkE+0x1c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <blinkE+0x22>
 31c:	00 00       	nop
 31e:	08 95       	ret

00000320 <displaySend>:
	_delay_ms(1);
}

void displaySend(char bytes, int rs){
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	18 2f       	mov	r17, r24
	// Command comes in as 8 bits
	// 1010 0101
	// First we send the left 4 bits (Upper nibble)
	// Then the right 4 bits (Lower nibble)

	if (rs) rs = 1; //RS defines if its a command or a character
 328:	61 15       	cp	r22, r1
 32a:	71 05       	cpc	r23, r1
 32c:	11 f0       	breq	.+4      	; 0x332 <displaySend+0x12>
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
	
	// First nibble.
	PORTC = (bytes & 0xF0);
 332:	81 2f       	mov	r24, r17
 334:	80 7f       	andi	r24, 0xF0	; 240
 336:	85 bb       	out	0x15, r24	; 21
	PORTC |= (rs<<2);
 338:	85 b3       	in	r24, 0x15	; 21
 33a:	eb 01       	movw	r28, r22
 33c:	cc 0f       	add	r28, r28
 33e:	dd 1f       	adc	r29, r29
 340:	cc 0f       	add	r28, r28
 342:	dd 1f       	adc	r29, r29
 344:	8c 2b       	or	r24, r28
 346:	85 bb       	out	0x15, r24	; 21
	blinkE();
 348:	d8 df       	rcall	.-80     	; 0x2fa <blinkE>

	// Second nibble
	PORTC = (bytes << 4);
 34a:	12 95       	swap	r17
 34c:	10 7f       	andi	r17, 0xF0	; 240
 34e:	15 bb       	out	0x15, r17	; 21
	PORTC |= (rs<<2);
 350:	65 b3       	in	r22, 0x15	; 21
 352:	6c 2b       	or	r22, r28
	blinkE();
 354:	65 bb       	out	0x15, r22	; 21
 356:	d1 df       	rcall	.-94     	; 0x2fa <blinkE>
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <charSend>:

void charSend(char character){
	displaySend(character, 1);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	dd cf       	rjmp	.-70     	; 0x320 <displaySend>
 366:	08 95       	ret

00000368 <cmdSend>:
}

void cmdSend(char cmd){
	displaySend(cmd, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	d9 cf       	rjmp	.-78     	; 0x320 <displaySend>
 36e:	08 95       	ret

00000370 <clear>:
	cmdSend(0x06); 
	return_home();
}

void clear(){
	cmdSend(0x01);
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	fa cf       	rjmp	.-12     	; 0x368 <cmdSend>
 374:	08 95       	ret

00000376 <display_text>:
}

void display_text(char *str){
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	ec 01       	movw	r28, r24
	for (; *str; str++)
 37c:	02 c0       	rjmp	.+4      	; 0x382 <display_text+0xc>
	{
		charSend(*str);
 37e:	f0 df       	rcall	.-32     	; 0x360 <charSend>
void clear(){
	cmdSend(0x01);
}

void display_text(char *str){
	for (; *str; str++)
 380:	21 96       	adiw	r28, 0x01	; 1
 382:	88 81       	ld	r24, Y
 384:	81 11       	cpse	r24, r1
 386:	fb cf       	rjmp	.-10     	; 0x37e <display_text+0x8>
	{
		charSend(*str);
	}
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <return_home>:

void return_home(){
	cmdSend(0x02);
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	eb cf       	rjmp	.-42     	; 0x368 <cmdSend>
 392:	08 95       	ret

00000394 <init>:
void cmdSend(char cmd){
	displaySend(cmd, 0);
}

void init(){
	DDRC = 0xFF;
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 398:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x20;
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	85 bb       	out	0x15, r24	; 21
	blinkE();
 39e:	ad df       	rcall	.-166    	; 0x2fa <blinkE>

	cmdSend(0x28); 
 3a0:	88 e2       	ldi	r24, 0x28	; 40
 3a2:	e2 df       	rcall	.-60     	; 0x368 <cmdSend>
	cmdSend(0x0F); 
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	e0 df       	rcall	.-64     	; 0x368 <cmdSend>
	cmdSend(0x06); 
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	de df       	rcall	.-68     	; 0x368 <cmdSend>
 3ac:	f0 cf       	rjmp	.-32     	; 0x38e <return_home>
	return_home();
 3ae:	08 95       	ret

000003b0 <set_cursor>:
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17

void return_home(){
	cmdSend(0x02);
}

void set_cursor(int position){
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	8c 01       	movw	r16, r24
	return_home();
 3ba:	e9 df       	rcall	.-46     	; 0x38e <return_home>
	for (int i = 0; i < position; i++)
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d0 e0       	ldi	r29, 0x00	; 0
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <set_cursor+0x18>
	{
		cmdSend(0b00010100);
 3c2:	84 e1       	ldi	r24, 0x14	; 20
 3c4:	d1 df       	rcall	.-94     	; 0x368 <cmdSend>
	cmdSend(0x02);
}

void set_cursor(int position){
	return_home();
	for (int i = 0; i < position; i++)
 3c6:	21 96       	adiw	r28, 0x01	; 1
 3c8:	c0 17       	cp	r28, r16
 3ca:	d1 07       	cpc	r29, r17
 3cc:	d4 f3       	brlt	.-12     	; 0x3c2 <set_cursor+0x12>
	{
		cmdSend(0b00010100);
	}

 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <twi_init>:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 3d8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 3dc:	80 e2       	ldi	r24, 0x20	; 32
 3de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 3e2:	08 95       	ret

000003e4 <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 3e4:	84 ea       	ldi	r24, 0xA4	; 164
 3e6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 3ea:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3ee:	88 23       	and	r24, r24
 3f0:	e4 f7       	brge	.-8      	; 0x3ea <twi_start+0x6>
}
 3f2:	08 95       	ret

000003f4 <twi_stop>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 3f4:	84 e9       	ldi	r24, 0x94	; 148
 3f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3fa:	08 95       	ret

000003fc <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 3fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 400:	84 e8       	ldi	r24, 0x84	; 132
 402:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 406:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 40a:	88 23       	and	r24, r24
 40c:	e4 f7       	brge	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
}
 40e:	08 95       	ret

00000410 <start_init>:





void start_init(void){
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
	
	twi_init();		// Init TWI interface
 414:	e1 df       	rcall	.-62     	; 0x3d8 <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 416:	e6 df       	rcall	.-52     	; 0x3e4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 418:	80 ee       	ldi	r24, 0xE0	; 224
 41a:	f0 df       	rcall	.-32     	; 0x3fc <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 41c:	81 e2       	ldi	r24, 0x21	; 33
 41e:	ee df       	rcall	.-36     	; 0x3fc <twi_tx>
	twi_stop();
 420:	e9 df       	rcall	.-46     	; 0x3f4 <twi_stop>

	twi_start();
 422:	e0 df       	rcall	.-64     	; 0x3e4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 424:	80 ee       	ldi	r24, 0xE0	; 224
 426:	ea df       	rcall	.-44     	; 0x3fc <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 428:	80 ea       	ldi	r24, 0xA0	; 160
	twi_stop();
 42a:	e8 df       	rcall	.-48     	; 0x3fc <twi_tx>

	twi_start();
 42c:	e3 df       	rcall	.-58     	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 42e:	da df       	rcall	.-76     	; 0x3e4 <twi_start>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 430:	80 ee       	ldi	r24, 0xE0	; 224
 432:	e4 df       	rcall	.-56     	; 0x3fc <twi_tx>
	twi_stop();
 434:	83 ee       	ldi	r24, 0xE3	; 227
 436:	e2 df       	rcall	.-60     	; 0x3fc <twi_tx>

	twi_start();
 438:	dd df       	rcall	.-70     	; 0x3f4 <twi_stop>
 43a:	d4 df       	rcall	.-88     	; 0x3e4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 43c:	80 ee       	ldi	r24, 0xE0	; 224
 43e:	de df       	rcall	.-68     	; 0x3fc <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 440:	81 e8       	ldi	r24, 0x81	; 129
 442:	dc df       	rcall	.-72     	; 0x3fc <twi_tx>
	twi_stop();
 444:	d7 df       	rcall	.-82     	; 0x3f4 <twi_stop>
 446:	ce df       	rcall	.-100    	; 0x3e4 <twi_start>
	
	
	//dimming all leds
	twi_start();
 448:	80 ee       	ldi	r24, 0xE0	; 224
 44a:	d8 df       	rcall	.-80     	; 0x3fc <twi_tx>
	twi_tx(0xE0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	d6 df       	rcall	.-84     	; 0x3fc <twi_tx>
 450:	c0 e0       	ldi	r28, 0x00	; 0
	twi_tx(0x00);
 452:	d0 e0       	ldi	r29, 0x00	; 0
 454:	03 c0       	rjmp	.+6      	; 0x45c <start_init+0x4c>
 456:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0; i < 16; i++){
 458:	d1 df       	rcall	.-94     	; 0x3fc <twi_tx>
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	c0 31       	cpi	r28, 0x10	; 16
		twi_tx(0x00);	// data
 45e:	d1 05       	cpc	r29, r1
 460:	d4 f3       	brlt	.-12     	; 0x456 <start_init+0x46>
 462:	c8 df       	rcall	.-112    	; 0x3f4 <twi_stop>
	
	//dimming all leds
	twi_start();
	twi_tx(0xE0);
	twi_tx(0x00);
	for(int i=0; i < 16; i++){
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <decision>:
 46a:	cf 93       	push	r28
		twi_tx(0x00);	// data
	}
	
	twi_stop();
 46c:	df 93       	push	r29
 46e:	ec 01       	movw	r28, r24
	
	
}
 470:	b9 df       	rcall	.-142    	; 0x3e4 <twi_start>
 472:	80 ee       	ldi	r24, 0xE0	; 224
 474:	c3 df       	rcall	.-122    	; 0x3fc <twi_tx>

void decision(int good){
	
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x00);	// Row
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	c1 df       	rcall	.-126    	; 0x3fc <twi_tx>
	twi_tx(0b0011110);	// data
 47a:	8e e1       	ldi	r24, 0x1E	; 30
 47c:	bf df       	rcall	.-130    	; 0x3fc <twi_tx>
	twi_stop();
 47e:	ba df       	rcall	.-140    	; 0x3f4 <twi_stop>
	
	twi_start();
 480:	b1 df       	rcall	.-158    	; 0x3e4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 482:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x02);	// Row
 484:	bb df       	rcall	.-138    	; 0x3fc <twi_tx>
 486:	82 e0       	ldi	r24, 0x02	; 2
	twi_tx(0b0100001);	// data
 488:	b9 df       	rcall	.-142    	; 0x3fc <twi_tx>
 48a:	81 e2       	ldi	r24, 0x21	; 33
	twi_stop();
 48c:	b7 df       	rcall	.-146    	; 0x3fc <twi_tx>
	
	twi_start();
 48e:	b2 df       	rcall	.-156    	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 490:	a9 df       	rcall	.-174    	; 0x3e4 <twi_start>
 492:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x04);	// Row
 494:	b3 df       	rcall	.-154    	; 0x3fc <twi_tx>
 496:	84 e0       	ldi	r24, 0x04	; 4
	twi_tx(0b11010010);	// data
 498:	b1 df       	rcall	.-158    	; 0x3fc <twi_tx>
 49a:	82 ed       	ldi	r24, 0xD2	; 210
	twi_stop();
 49c:	af df       	rcall	.-162    	; 0x3fc <twi_tx>
	
	
	twi_start();
 49e:	aa df       	rcall	.-172    	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 4a0:	a1 df       	rcall	.-190    	; 0x3e4 <twi_start>
	twi_tx(0x06);	// Row
 4a2:	80 ee       	ldi	r24, 0xE0	; 224
 4a4:	ab df       	rcall	.-170    	; 0x3fc <twi_tx>
	twi_tx(0b11000000);	// data
 4a6:	86 e0       	ldi	r24, 0x06	; 6
 4a8:	a9 df       	rcall	.-174    	; 0x3fc <twi_tx>
	twi_stop();
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
	
	
	if (good){
 4ac:	a7 df       	rcall	.-178    	; 0x3fc <twi_tx>
		twi_start();
 4ae:	a2 df       	rcall	.-188    	; 0x3f4 <twi_stop>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4b0:	cd 2b       	or	r28, r29
 4b2:	89 f0       	breq	.+34     	; 0x4d6 <decision+0x6c>
		twi_tx(0x08);	// Row
 4b4:	97 df       	rcall	.-210    	; 0x3e4 <twi_start>
 4b6:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0b11010010);	// data
 4b8:	a1 df       	rcall	.-190    	; 0x3fc <twi_tx>
 4ba:	88 e0       	ldi	r24, 0x08	; 8
		twi_stop();
 4bc:	9f df       	rcall	.-194    	; 0x3fc <twi_tx>
		
		twi_start();
 4be:	82 ed       	ldi	r24, 0xD2	; 210
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4c0:	9d df       	rcall	.-198    	; 0x3fc <twi_tx>
 4c2:	98 df       	rcall	.-208    	; 0x3f4 <twi_stop>
		twi_tx(0x0A);	// Row
 4c4:	8f df       	rcall	.-226    	; 0x3e4 <twi_start>
 4c6:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0b11001100);	// data
 4c8:	99 df       	rcall	.-206    	; 0x3fc <twi_tx>
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
		twi_stop();
 4cc:	97 df       	rcall	.-210    	; 0x3fc <twi_tx>
 4ce:	8c ec       	ldi	r24, 0xCC	; 204
	}
	
	else{
		twi_start();
 4d0:	95 df       	rcall	.-214    	; 0x3fc <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4d2:	90 df       	rcall	.-224    	; 0x3f4 <twi_stop>
 4d4:	10 c0       	rjmp	.+32     	; 0x4f6 <decision+0x8c>
 4d6:	86 df       	rcall	.-244    	; 0x3e4 <twi_start>
		twi_tx(0x08);	// Row
 4d8:	80 ee       	ldi	r24, 0xE0	; 224
 4da:	90 df       	rcall	.-224    	; 0x3fc <twi_tx>
 4dc:	88 e0       	ldi	r24, 0x08	; 8
		twi_tx(0b11001100);	// data
 4de:	8e df       	rcall	.-228    	; 0x3fc <twi_tx>
 4e0:	8c ec       	ldi	r24, 0xCC	; 204
 4e2:	8c df       	rcall	.-232    	; 0x3fc <twi_tx>
		twi_stop();
 4e4:	87 df       	rcall	.-242    	; 0x3f4 <twi_stop>
 4e6:	7e df       	rcall	.-260    	; 0x3e4 <twi_start>
		
		twi_start();
 4e8:	80 ee       	ldi	r24, 0xE0	; 224
 4ea:	88 df       	rcall	.-240    	; 0x3fc <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 4ec:	8a e0       	ldi	r24, 0x0A	; 10
 4ee:	86 df       	rcall	.-244    	; 0x3fc <twi_tx>
 4f0:	82 ed       	ldi	r24, 0xD2	; 210
		twi_tx(0x0A);	// Row
 4f2:	84 df       	rcall	.-248    	; 0x3fc <twi_tx>
 4f4:	7f df       	rcall	.-258    	; 0x3f4 <twi_stop>
 4f6:	76 df       	rcall	.-276    	; 0x3e4 <twi_start>
		twi_tx(0b11010010);	// data
 4f8:	80 ee       	ldi	r24, 0xE0	; 224
 4fa:	80 df       	rcall	.-256    	; 0x3fc <twi_tx>
 4fc:	8c e0       	ldi	r24, 0x0C	; 12
		twi_stop();
 4fe:	7e df       	rcall	.-260    	; 0x3fc <twi_tx>
 500:	81 e2       	ldi	r24, 0x21	; 33
		
	}
	
	
	twi_start();
 502:	7c df       	rcall	.-264    	; 0x3fc <twi_tx>
 504:	77 df       	rcall	.-274    	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 506:	6e df       	rcall	.-292    	; 0x3e4 <twi_start>
 508:	80 ee       	ldi	r24, 0xE0	; 224
 50a:	78 df       	rcall	.-272    	; 0x3fc <twi_tx>
	twi_tx(0x0C);	// Row
 50c:	8e e0       	ldi	r24, 0x0E	; 14
 50e:	76 df       	rcall	.-276    	; 0x3fc <twi_tx>
 510:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0b0100001);	// data
 512:	74 df       	rcall	.-280    	; 0x3fc <twi_tx>
 514:	6f df       	rcall	.-290    	; 0x3f4 <twi_stop>
 516:	df 91       	pop	r29
	twi_stop();
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <three>:
	
	twi_start();
 51c:	63 df       	rcall	.-314    	; 0x3e4 <twi_start>
 51e:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 520:	6d df       	rcall	.-294    	; 0x3fc <twi_tx>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	6b df       	rcall	.-298    	; 0x3fc <twi_tx>
	twi_tx(0x0E);	// Row
 526:	8e e1       	ldi	r24, 0x1E	; 30
 528:	69 df       	rcall	.-302    	; 0x3fc <twi_tx>
 52a:	64 df       	rcall	.-312    	; 0x3f4 <twi_stop>
	twi_tx(0b0011110);	// data
 52c:	5b df       	rcall	.-330    	; 0x3e4 <twi_start>
 52e:	80 ee       	ldi	r24, 0xE0	; 224
 530:	65 df       	rcall	.-310    	; 0x3fc <twi_tx>
	twi_stop();
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	63 df       	rcall	.-314    	; 0x3fc <twi_tx>
}
 536:	80 e1       	ldi	r24, 0x10	; 16
 538:	61 df       	rcall	.-318    	; 0x3fc <twi_tx>
 53a:	5c df       	rcall	.-328    	; 0x3f4 <twi_stop>
	twi_tx(0x02);	// Row
	twi_tx(0b0010000);	// data
	twi_stop();
	
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 53c:	53 df       	rcall	.-346    	; 0x3e4 <twi_start>
 53e:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x04);	// Row
 540:	5d df       	rcall	.-326    	; 0x3fc <twi_tx>
	twi_tx(0b0010000);	// data;
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	5b df       	rcall	.-330    	; 0x3fc <twi_tx>
	twi_stop();
 546:	80 e1       	ldi	r24, 0x10	; 16
	
	
	twi_start();
 548:	59 df       	rcall	.-334    	; 0x3fc <twi_tx>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 54a:	54 df       	rcall	.-344    	; 0x3f4 <twi_stop>
 54c:	4b df       	rcall	.-362    	; 0x3e4 <twi_start>
	twi_tx(0x06);	// Row
 54e:	80 ee       	ldi	r24, 0xE0	; 224
 550:	55 df       	rcall	.-342    	; 0x3fc <twi_tx>
	twi_tx(0b0011110);	// data
 552:	86 e0       	ldi	r24, 0x06	; 6
	twi_stop();
 554:	53 df       	rcall	.-346    	; 0x3fc <twi_tx>
	
	twi_start();
 556:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 558:	51 df       	rcall	.-350    	; 0x3fc <twi_tx>
	twi_tx(0x08);	// Row
 55a:	4c df       	rcall	.-360    	; 0x3f4 <twi_stop>
 55c:	43 df       	rcall	.-378    	; 0x3e4 <twi_start>
	twi_tx(0b0011110);	// data
 55e:	80 ee       	ldi	r24, 0xE0	; 224
 560:	4d df       	rcall	.-358    	; 0x3fc <twi_tx>
	twi_stop();
 562:	88 e0       	ldi	r24, 0x08	; 8
	
	
	twi_start();
 564:	4b df       	rcall	.-362    	; 0x3fc <twi_tx>
 566:	8e e1       	ldi	r24, 0x1E	; 30
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 568:	49 df       	rcall	.-366    	; 0x3fc <twi_tx>
 56a:	44 df       	rcall	.-376    	; 0x3f4 <twi_stop>
 56c:	3b df       	rcall	.-394    	; 0x3e4 <twi_start>
	twi_tx(0x0A);	// Row
 56e:	80 ee       	ldi	r24, 0xE0	; 224
 570:	45 df       	rcall	.-374    	; 0x3fc <twi_tx>
 572:	8a e0       	ldi	r24, 0x0A	; 10
	twi_tx(0b0010000);	// data
 574:	43 df       	rcall	.-378    	; 0x3fc <twi_tx>
 576:	80 e1       	ldi	r24, 0x10	; 16
 578:	41 df       	rcall	.-382    	; 0x3fc <twi_tx>
	twi_stop();
 57a:	3c df       	rcall	.-392    	; 0x3f4 <twi_stop>
 57c:	33 df       	rcall	.-410    	; 0x3e4 <twi_start>
	
	twi_start();
 57e:	80 ee       	ldi	r24, 0xE0	; 224
 580:	3d df       	rcall	.-390    	; 0x3fc <twi_tx>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 582:	8c e0       	ldi	r24, 0x0C	; 12
 584:	3b df       	rcall	.-394    	; 0x3fc <twi_tx>
 586:	80 e1       	ldi	r24, 0x10	; 16
	twi_tx(0x0C);	// Row
 588:	39 df       	rcall	.-398    	; 0x3fc <twi_tx>
 58a:	34 df       	rcall	.-408    	; 0x3f4 <twi_stop>
 58c:	2b df       	rcall	.-426    	; 0x3e4 <twi_start>
	twi_tx(0b0010000);	// data;
 58e:	80 ee       	ldi	r24, 0xE0	; 224
 590:	35 df       	rcall	.-406    	; 0x3fc <twi_tx>
 592:	8e e0       	ldi	r24, 0x0E	; 14
	twi_stop();
 594:	33 df       	rcall	.-410    	; 0x3fc <twi_tx>
 596:	8e e1       	ldi	r24, 0x1E	; 30
	
	
	twi_start();
 598:	31 df       	rcall	.-414    	; 0x3fc <twi_tx>
 59a:	2c cf       	rjmp	.-424    	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 59c:	08 95       	ret

0000059e <two>:
 59e:	22 df       	rcall	.-444    	; 0x3e4 <twi_start>
 5a0:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x0E);	// Row
 5a2:	2c df       	rcall	.-424    	; 0x3fc <twi_tx>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	2a df       	rcall	.-428    	; 0x3fc <twi_tx>
	twi_tx(0b0011110);	// data
 5a8:	8e e1       	ldi	r24, 0x1E	; 30
 5aa:	28 df       	rcall	.-432    	; 0x3fc <twi_tx>
 5ac:	23 df       	rcall	.-442    	; 0x3f4 <twi_stop>
	twi_stop();
 5ae:	1a df       	rcall	.-460    	; 0x3e4 <twi_start>
 5b0:	80 ee       	ldi	r24, 0xE0	; 224
 5b2:	24 df       	rcall	.-440    	; 0x3fc <twi_tx>
		twi_stop();
		
		
		twi_start();
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(0x02);	// Row
 5b4:	82 e0       	ldi	r24, 0x02	; 2
		twi_tx(0b0010000);	// data
 5b6:	22 df       	rcall	.-444    	; 0x3fc <twi_tx>
 5b8:	80 e1       	ldi	r24, 0x10	; 16
		twi_stop();
 5ba:	20 df       	rcall	.-448    	; 0x3fc <twi_tx>
		
		twi_start();
 5bc:	1b df       	rcall	.-458    	; 0x3f4 <twi_stop>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 5be:	12 df       	rcall	.-476    	; 0x3e4 <twi_start>
 5c0:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0x04);	// Row
 5c2:	1c df       	rcall	.-456    	; 0x3fc <twi_tx>
		twi_tx(0b0010000);	// data;
 5c4:	84 e0       	ldi	r24, 0x04	; 4
 5c6:	1a df       	rcall	.-460    	; 0x3fc <twi_tx>
		twi_stop();
 5c8:	80 e1       	ldi	r24, 0x10	; 16
		
		
		twi_start();
 5ca:	18 df       	rcall	.-464    	; 0x3fc <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 5cc:	13 df       	rcall	.-474    	; 0x3f4 <twi_stop>
 5ce:	0a df       	rcall	.-492    	; 0x3e4 <twi_start>
		twi_tx(0x06);	// Row
 5d0:	80 ee       	ldi	r24, 0xE0	; 224
 5d2:	14 df       	rcall	.-472    	; 0x3fc <twi_tx>
		twi_tx(0b0011110);	// data
 5d4:	86 e0       	ldi	r24, 0x06	; 6
		twi_stop();
 5d6:	12 df       	rcall	.-476    	; 0x3fc <twi_tx>
		
		twi_start();
 5d8:	8e e1       	ldi	r24, 0x1E	; 30
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 5da:	10 df       	rcall	.-480    	; 0x3fc <twi_tx>
		twi_tx(0x08);	// Row
 5dc:	0b df       	rcall	.-490    	; 0x3f4 <twi_stop>
 5de:	02 df       	rcall	.-508    	; 0x3e4 <twi_start>
		twi_tx(0b0000010);	// data
 5e0:	80 ee       	ldi	r24, 0xE0	; 224
 5e2:	0c df       	rcall	.-488    	; 0x3fc <twi_tx>
		twi_stop();
 5e4:	88 e0       	ldi	r24, 0x08	; 8
		
		
		twi_start();
 5e6:	0a df       	rcall	.-492    	; 0x3fc <twi_tx>
 5e8:	82 e0       	ldi	r24, 0x02	; 2
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 5ea:	08 df       	rcall	.-496    	; 0x3fc <twi_tx>
 5ec:	03 df       	rcall	.-506    	; 0x3f4 <twi_stop>
 5ee:	fa de       	rcall	.-524    	; 0x3e4 <twi_start>
		twi_tx(0x0A);	// Row
 5f0:	80 ee       	ldi	r24, 0xE0	; 224
 5f2:	04 df       	rcall	.-504    	; 0x3fc <twi_tx>
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
		twi_tx(0b0000010);	// data
 5f6:	02 df       	rcall	.-508    	; 0x3fc <twi_tx>
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	00 df       	rcall	.-512    	; 0x3fc <twi_tx>
		twi_stop();
 5fc:	fb de       	rcall	.-522    	; 0x3f4 <twi_stop>
 5fe:	f2 de       	rcall	.-540    	; 0x3e4 <twi_start>
		
		twi_start();
 600:	80 ee       	ldi	r24, 0xE0	; 224
 602:	fc de       	rcall	.-520    	; 0x3fc <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 604:	8c e0       	ldi	r24, 0x0C	; 12
 606:	fa de       	rcall	.-524    	; 0x3fc <twi_tx>
 608:	82 e0       	ldi	r24, 0x02	; 2
		twi_tx(0x0C);	// Row
 60a:	f8 de       	rcall	.-528    	; 0x3fc <twi_tx>
 60c:	f3 de       	rcall	.-538    	; 0x3f4 <twi_stop>
 60e:	ea de       	rcall	.-556    	; 0x3e4 <twi_start>
		twi_tx(0b0000010);	// data;
 610:	80 ee       	ldi	r24, 0xE0	; 224
 612:	f4 de       	rcall	.-536    	; 0x3fc <twi_tx>
 614:	8e e0       	ldi	r24, 0x0E	; 14
		twi_stop();
 616:	f2 de       	rcall	.-540    	; 0x3fc <twi_tx>
 618:	8e e1       	ldi	r24, 0x1E	; 30
		
		
		twi_start();
 61a:	f0 de       	rcall	.-544    	; 0x3fc <twi_tx>
 61c:	eb ce       	rjmp	.-554    	; 0x3f4 <twi_stop>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 61e:	08 95       	ret

00000620 <one>:
 620:	e1 de       	rcall	.-574    	; 0x3e4 <twi_start>
 622:	80 ee       	ldi	r24, 0xE0	; 224
		twi_tx(0x0E);	// Row
 624:	eb de       	rcall	.-554    	; 0x3fc <twi_tx>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	e9 de       	rcall	.-558    	; 0x3fc <twi_tx>
		twi_tx(0b0011110);	// data
 62a:	88 e0       	ldi	r24, 0x08	; 8
 62c:	e7 de       	rcall	.-562    	; 0x3fc <twi_tx>
 62e:	e2 de       	rcall	.-572    	; 0x3f4 <twi_stop>
		twi_stop();
 630:	d9 de       	rcall	.-590    	; 0x3e4 <twi_start>
 632:	80 ee       	ldi	r24, 0xE0	; 224
 634:	e3 de       	rcall	.-570    	; 0x3fc <twi_tx>
	twi_stop();
	
	
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x02);	// Row
 636:	82 e0       	ldi	r24, 0x02	; 2
	twi_tx(0b001100);	// data
 638:	e1 de       	rcall	.-574    	; 0x3fc <twi_tx>
 63a:	8c e0       	ldi	r24, 0x0C	; 12
	twi_stop();
 63c:	df de       	rcall	.-578    	; 0x3fc <twi_tx>
	
	twi_start();
 63e:	da de       	rcall	.-588    	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 640:	d1 de       	rcall	.-606    	; 0x3e4 <twi_start>
 642:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0x04);	// Row
 644:	db de       	rcall	.-586    	; 0x3fc <twi_tx>
	twi_tx(0b0001000);	// data;
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	d9 de       	rcall	.-590    	; 0x3fc <twi_tx>
	twi_stop();
 64a:	88 e0       	ldi	r24, 0x08	; 8
	
	
	twi_start();
 64c:	d7 de       	rcall	.-594    	; 0x3fc <twi_tx>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 64e:	d2 de       	rcall	.-604    	; 0x3f4 <twi_stop>
 650:	c9 de       	rcall	.-622    	; 0x3e4 <twi_start>
	twi_tx(0x06);	// Row
 652:	80 ee       	ldi	r24, 0xE0	; 224
 654:	d3 de       	rcall	.-602    	; 0x3fc <twi_tx>
	twi_tx(0b0001000);	// data
 656:	86 e0       	ldi	r24, 0x06	; 6
	twi_stop();
 658:	d1 de       	rcall	.-606    	; 0x3fc <twi_tx>
	
	twi_start();
 65a:	88 e0       	ldi	r24, 0x08	; 8
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 65c:	cf de       	rcall	.-610    	; 0x3fc <twi_tx>
	twi_tx(0x08);	// Row
 65e:	ca de       	rcall	.-620    	; 0x3f4 <twi_stop>
 660:	c1 de       	rcall	.-638    	; 0x3e4 <twi_start>
	twi_tx(0b0001000);	// data
 662:	80 ee       	ldi	r24, 0xE0	; 224
 664:	cb de       	rcall	.-618    	; 0x3fc <twi_tx>
	twi_stop();
 666:	88 e0       	ldi	r24, 0x08	; 8
	
	
	twi_start();
 668:	c9 de       	rcall	.-622    	; 0x3fc <twi_tx>
 66a:	88 e0       	ldi	r24, 0x08	; 8
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 66c:	c7 de       	rcall	.-626    	; 0x3fc <twi_tx>
 66e:	c2 de       	rcall	.-636    	; 0x3f4 <twi_stop>
 670:	b9 de       	rcall	.-654    	; 0x3e4 <twi_start>
	twi_tx(0x0A);	// Row
 672:	80 ee       	ldi	r24, 0xE0	; 224
 674:	c3 de       	rcall	.-634    	; 0x3fc <twi_tx>
 676:	8a e0       	ldi	r24, 0x0A	; 10
	twi_tx(0b0001000);	// data
 678:	c1 de       	rcall	.-638    	; 0x3fc <twi_tx>
 67a:	88 e0       	ldi	r24, 0x08	; 8
 67c:	bf de       	rcall	.-642    	; 0x3fc <twi_tx>
	twi_stop();
 67e:	ba de       	rcall	.-652    	; 0x3f4 <twi_stop>
 680:	b1 de       	rcall	.-670    	; 0x3e4 <twi_start>
	
	twi_start();
 682:	80 ee       	ldi	r24, 0xE0	; 224
 684:	bb de       	rcall	.-650    	; 0x3fc <twi_tx>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 686:	8c e0       	ldi	r24, 0x0C	; 12
 688:	b9 de       	rcall	.-654    	; 0x3fc <twi_tx>
 68a:	88 e0       	ldi	r24, 0x08	; 8
	twi_tx(0x0C);	// Row
 68c:	b7 de       	rcall	.-658    	; 0x3fc <twi_tx>
 68e:	b2 de       	rcall	.-668    	; 0x3f4 <twi_stop>
 690:	a9 de       	rcall	.-686    	; 0x3e4 <twi_start>
	twi_tx(0b0001000);	// data;
 692:	80 ee       	ldi	r24, 0xE0	; 224
 694:	b3 de       	rcall	.-666    	; 0x3fc <twi_tx>
 696:	8e e0       	ldi	r24, 0x0E	; 14
	twi_stop();
 698:	b1 de       	rcall	.-670    	; 0x3fc <twi_tx>
 69a:	8e e1       	ldi	r24, 0x1E	; 30
	
	
	twi_start();
 69c:	af de       	rcall	.-674    	; 0x3fc <twi_tx>
 69e:	aa ce       	rjmp	.-684    	; 0x3f4 <twi_stop>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 6a0:	08 95       	ret

000006a2 <countToDecision>:
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
	twi_tx(0x0E);	// Row
 6a6:	ec 01       	movw	r28, r24
 6a8:	39 df       	rcall	.-398    	; 0x51c <three>
 6aa:	88 ee       	ldi	r24, 0xE8	; 232
	twi_tx(0b0011110);	// data
 6ac:	93 e0       	ldi	r25, 0x03	; 3
 6ae:	16 de       	rcall	.-980    	; 0x2dc <wait>
 6b0:	76 df       	rcall	.-276    	; 0x59e <two>
	twi_stop();
 6b2:	88 ee       	ldi	r24, 0xE8	; 232
 6b4:	93 e0       	ldi	r25, 0x03	; 3
 6b6:	12 de       	rcall	.-988    	; 0x2dc <wait>
	
	wait(1000);
	
	one();
	 
	wait(1000);
 6b8:	b3 df       	rcall	.-154    	; 0x620 <one>
 6ba:	88 ee       	ldi	r24, 0xE8	; 232
 6bc:	93 e0       	ldi	r25, 0x03	; 3
 6be:	0e de       	rcall	.-996    	; 0x2dc <wait>
	
	decision(good);
 6c0:	ce 01       	movw	r24, r28
 6c2:	d3 de       	rcall	.-602    	; 0x46a <decision>
 6c4:	df 91       	pop	r29
}
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
