
ikCarryHunDeMoeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080013a  0080013a  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137f  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7c  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089d  00000000  00000000  0000230f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a8  00000000  00000000  0000332a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000037d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 33       	cpi	r26, 0x3C	; 60
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	96 d0       	rcall	.+300    	; 0x1f0 <main>
  c4:	1c c1       	rjmp	.+568    	; 0x2fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
#include <stdint.h>
#include "lcd.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	08 c0       	rjmp	.+16     	; 0xde <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef ec       	ldi	r30, 0xCF	; 207
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wait+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wait+0x10>
  d8:	00 00       	nop
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	ac f3       	brlt	.-22     	; 0xce <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  e4:	08 95       	ret

000000e6 <blinkE>:

void blinkE(){
	//In order to confirm our command we need to blink the E pin.
	PORTC |= (1<<3);
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <blinkE+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <blinkE+0x10>
  f6:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<3);
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	8f ec       	ldi	r24, 0xCF	; 207
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <blinkE+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <blinkE+0x22>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <displaySend>:
	_delay_ms(1);
}

void displaySend(char bytes, int rs){
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	18 2f       	mov	r17, r24
	// Command comes in as 8 bits
	// 1010 0101
	// First we send the left 4 bits (Upper nibble)
	// Then the right 4 bits (Lower nibble)

	if (rs) rs = 1; //RS defines if its a command or a character
 114:	61 15       	cp	r22, r1
 116:	71 05       	cpc	r23, r1
 118:	11 f0       	breq	.+4      	; 0x11e <displaySend+0x12>
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	70 e0       	ldi	r23, 0x00	; 0
	
	// First nibble.
	PORTC = (bytes & 0xF0);
 11e:	81 2f       	mov	r24, r17
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	85 bb       	out	0x15, r24	; 21
	PORTC |= (rs<<2);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	eb 01       	movw	r28, r22
 128:	cc 0f       	add	r28, r28
 12a:	dd 1f       	adc	r29, r29
 12c:	cc 0f       	add	r28, r28
 12e:	dd 1f       	adc	r29, r29
 130:	8c 2b       	or	r24, r28
 132:	85 bb       	out	0x15, r24	; 21
	blinkE();
 134:	d8 df       	rcall	.-80     	; 0xe6 <blinkE>

	// Second nibble
	PORTC = (bytes << 4);
 136:	12 95       	swap	r17
 138:	10 7f       	andi	r17, 0xF0	; 240
 13a:	15 bb       	out	0x15, r17	; 21
	PORTC |= (rs<<2);
 13c:	65 b3       	in	r22, 0x15	; 21
 13e:	6c 2b       	or	r22, r28
	blinkE();
 140:	65 bb       	out	0x15, r22	; 21
 142:	d1 df       	rcall	.-94     	; 0xe6 <blinkE>
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	08 95       	ret

0000014c <charSend>:

void charSend(char character){
	displaySend(character, 1);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	dd cf       	rjmp	.-70     	; 0x10c <displaySend>
 152:	08 95       	ret

00000154 <cmdSend>:
}

void cmdSend(char cmd){
	displaySend(cmd, 0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	d9 cf       	rjmp	.-78     	; 0x10c <displaySend>
 15a:	08 95       	ret

0000015c <clear>:
	cmdSend(0x06);
	return_home();
}

void clear(){
	cmdSend(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	fa cf       	rjmp	.-12     	; 0x154 <cmdSend>
 160:	08 95       	ret

00000162 <display_text>:
}

void display_text(char *str){
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
	for (; *str; str++)
 168:	02 c0       	rjmp	.+4      	; 0x16e <display_text+0xc>
	{
		charSend(*str);
 16a:	f0 df       	rcall	.-32     	; 0x14c <charSend>
void clear(){
	cmdSend(0x01);
}

void display_text(char *str){
	for (; *str; str++)
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	88 81       	ld	r24, Y
 170:	81 11       	cpse	r24, r1
 172:	fb cf       	rjmp	.-10     	; 0x16a <display_text+0x8>
	{
		charSend(*str);
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <return_home>:

void return_home(){
	cmdSend(0x02);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	eb cf       	rjmp	.-42     	; 0x154 <cmdSend>
 17e:	08 95       	ret

00000180 <init>:
void cmdSend(char cmd){
	displaySend(cmd, 0);
}

void init(){
	DDRC = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 184:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x20;
 186:	80 e2       	ldi	r24, 0x20	; 32
 188:	85 bb       	out	0x15, r24	; 21
	blinkE();
 18a:	ad df       	rcall	.-166    	; 0xe6 <blinkE>

	cmdSend(0x28);
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	e2 df       	rcall	.-60     	; 0x154 <cmdSend>
	cmdSend(0x0F);
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	e0 df       	rcall	.-64     	; 0x154 <cmdSend>
	cmdSend(0x06);
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	de df       	rcall	.-68     	; 0x154 <cmdSend>
 198:	f0 cf       	rjmp	.-32     	; 0x17a <return_home>
	return_home();
 19a:	08 95       	ret

0000019c <set_cursor>:
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17

void return_home(){
	cmdSend(0x02);
}

void set_cursor(int position){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	8c 01       	movw	r16, r24
	return_home();
 1a6:	e9 df       	rcall	.-46     	; 0x17a <return_home>
	for (int i = 0; i < position; i++)
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <set_cursor+0x18>
	{
		cmdSend(0b00010100);
 1ae:	84 e1       	ldi	r24, 0x14	; 20
 1b0:	d1 df       	rcall	.-94     	; 0x154 <cmdSend>
	cmdSend(0x02);
}

void set_cursor(int position){
	return_home();
	for (int i = 0; i < position; i++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	c0 17       	cp	r28, r16
 1b6:	d1 07       	cpc	r29, r17
 1b8:	d4 f3       	brlt	.-12     	; 0x1ae <set_cursor+0x12>
	{
		cmdSend(0b00010100);
	}

 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <vraag1>:


int counter = 0;


void vraag1(char *vraag1, char *antwoord1, char *antwoord2, int nummer ){
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	8b 01       	movw	r16, r22
 1ce:	ea 01       	movw	r28, r20
	
	display_text(vraag1);
 1d0:	c8 df       	rcall	.-112    	; 0x162 <display_text>
	set_cursor(40);
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	e2 df       	rcall	.-60     	; 0x19c <set_cursor>
	
	display_text(antwoord1);
 1d8:	c8 01       	movw	r24, r16
 1da:	c3 df       	rcall	.-122    	; 0x162 <display_text>
	set_cursor(50);
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	dd df       	rcall	.-70     	; 0x19c <set_cursor>
	display_text(antwoord2);
 1e2:	ce 01       	movw	r24, r28
 1e4:	be df       	rcall	.-132    	; 0x162 <display_text>
 1e6:	df 91       	pop	r29
	
}
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <main>:
 1f0:	59 d0       	rcall	.+178    	; 0x2a4 <start_init>
int main( void )
{
	
	start_init();
	
	DDRA = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x01;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
	init();
 1f8:	8b bb       	out	0x1b, r24	; 27
	
	clear();
 1fa:	c2 df       	rcall	.-124    	; 0x180 <init>
	

	display_text("welkom, druk op");
 1fc:	af df       	rcall	.-162    	; 0x15c <clear>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
	set_cursor(40);
 202:	af df       	rcall	.-162    	; 0x162 <display_text>
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	90 e0       	ldi	r25, 0x00	; 0
	display_text("B1 om te starten");
 208:	c9 df       	rcall	.-110    	; 0x19c <set_cursor>
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	a9 df       	rcall	.-174    	; 0x162 <display_text>
	
	PORTB = 0x00; 
 210:	18 ba       	out	0x18, r1	; 24
	while (1)
	{
		
		

		if (PINB & 0x02){						// b2 indrukken dan komt hij hier in
 212:	b1 9b       	sbis	0x16, 1	; 22
 214:	0c c0       	rjmp	.+24     	; 0x22e <main+0x3e>
			counter++;
 216:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 21a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 224:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			wait(1000);
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
		} 
		
		if (PINB & 0x04){						// b2 indrukken dan komt hij hier in
 22c:	4d df       	rcall	.-358    	; 0xc8 <wait>
 22e:	b2 9b       	sbis	0x16, 2	; 22
			display_text("B");
 230:	03 c0       	rjmp	.+6      	; 0x238 <main+0x48>
 232:	81 e2       	ldi	r24, 0x21	; 33
 234:	91 e0       	ldi	r25, 0x01	; 1
		}
		
		
		if (counter == 1)
 236:	95 df       	rcall	.-214    	; 0x162 <display_text>
 238:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 23c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
 240:	01 97       	sbiw	r24, 0x01	; 1
		{
			clear();
 242:	39 f7       	brne	.-50     	; 0x212 <main+0x22>
			vraag1("Hoe heet ik?", "Jurre", "Jan", 0);
 244:	8b df       	rcall	.-234    	; 0x15c <clear>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	43 e2       	ldi	r20, 0x23	; 35
 24c:	51 e0       	ldi	r21, 0x01	; 1
 24e:	67 e2       	ldi	r22, 0x27	; 39
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	8d e2       	ldi	r24, 0x2D	; 45
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	b6 df       	rcall	.-148    	; 0x1c4 <vraag1>
			counter++;
 258:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 25c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 266:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 26a:	d3 cf       	rjmp	.-90     	; 0x212 <main+0x22>

0000026c <twi_init>:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 26c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 276:	08 95       	ret

00000278 <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 278:	84 ea       	ldi	r24, 0xA4	; 164
 27a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 27e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 282:	88 23       	and	r24, r24
 284:	e4 f7       	brge	.-8      	; 0x27e <twi_start+0x6>
}
 286:	08 95       	ret

00000288 <twi_stop>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 288:	84 e9       	ldi	r24, 0x94	; 148
 28a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 28e:	08 95       	ret

00000290 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 290:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 294:	84 e8       	ldi	r24, 0x84	; 132
 296:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 29a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 29e:	88 23       	and	r24, r24
 2a0:	e4 f7       	brge	.-8      	; 0x29a <twi_tx+0xa>
}
 2a2:	08 95       	ret

000002a4 <start_init>:





void start_init(void){
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
	
	twi_init();		// Init TWI interface
 2a8:	e1 df       	rcall	.-62     	; 0x26c <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 2aa:	e6 df       	rcall	.-52     	; 0x278 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 2ac:	80 ee       	ldi	r24, 0xE0	; 224
 2ae:	f0 df       	rcall	.-32     	; 0x290 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 2b0:	81 e2       	ldi	r24, 0x21	; 33
 2b2:	ee df       	rcall	.-36     	; 0x290 <twi_tx>
	twi_stop();
 2b4:	e9 df       	rcall	.-46     	; 0x288 <twi_stop>

	twi_start();
 2b6:	e0 df       	rcall	.-64     	; 0x278 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2b8:	80 ee       	ldi	r24, 0xE0	; 224
 2ba:	ea df       	rcall	.-44     	; 0x290 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 2bc:	80 ea       	ldi	r24, 0xA0	; 160
	twi_stop();
 2be:	e8 df       	rcall	.-48     	; 0x290 <twi_tx>

	twi_start();
 2c0:	e3 df       	rcall	.-58     	; 0x288 <twi_stop>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2c2:	da df       	rcall	.-76     	; 0x278 <twi_start>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 2c4:	80 ee       	ldi	r24, 0xE0	; 224
 2c6:	e4 df       	rcall	.-56     	; 0x290 <twi_tx>
	twi_stop();
 2c8:	83 ee       	ldi	r24, 0xE3	; 227
 2ca:	e2 df       	rcall	.-60     	; 0x290 <twi_tx>

	twi_start();
 2cc:	dd df       	rcall	.-70     	; 0x288 <twi_stop>
 2ce:	d4 df       	rcall	.-88     	; 0x278 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2d0:	80 ee       	ldi	r24, 0xE0	; 224
 2d2:	de df       	rcall	.-68     	; 0x290 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 2d4:	81 e8       	ldi	r24, 0x81	; 129
 2d6:	dc df       	rcall	.-72     	; 0x290 <twi_tx>
	twi_stop();
 2d8:	d7 df       	rcall	.-82     	; 0x288 <twi_stop>
 2da:	ce df       	rcall	.-100    	; 0x278 <twi_start>
	
	
	//dimming all leds
	twi_start();
 2dc:	80 ee       	ldi	r24, 0xE0	; 224
 2de:	d8 df       	rcall	.-80     	; 0x290 <twi_tx>
	twi_tx(0xE0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	d6 df       	rcall	.-84     	; 0x290 <twi_tx>
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
	twi_tx(0x00);
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <start_init+0x4c>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0; i < 16; i++){
 2ec:	d1 df       	rcall	.-94     	; 0x290 <twi_tx>
 2ee:	21 96       	adiw	r28, 0x01	; 1
 2f0:	c0 31       	cpi	r28, 0x10	; 16
		twi_tx(0x00);	// data
 2f2:	d1 05       	cpc	r29, r1
 2f4:	d4 f3       	brlt	.-12     	; 0x2ea <start_init+0x46>
 2f6:	c8 df       	rcall	.-112    	; 0x288 <twi_stop>
	
	//dimming all leds
	twi_start();
	twi_tx(0xE0);
	twi_tx(0x00);
	for(int i=0; i < 16; i++){
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
		twi_tx(0x00);	// data
	}
	
	twi_stop();
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
