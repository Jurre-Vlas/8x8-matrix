
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d88  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000862  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000418  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bb  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001bc  000001bc  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002074  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.twi_init 0000000c  000001a8  000001a8  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.twi_start 00000010  00000198  00000198  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_stop 00000008  000001b4  000001b4  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_tx  00000014  00000184  00000184  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.wait    0000001e  00000166  00000166  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    000000c2  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
   8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
   c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  10:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  14:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  20:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  24:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  28:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  2c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  3c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  40:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  44:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  48:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  50:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  5c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  60:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  68:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  6c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  70:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  74:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  78:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  7c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  80:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  84:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  88:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001bc <__bad_interrupt>:
 1bc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.twi_init:

000001a8 <twi_init>:
outputs:	
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 1a8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1b2:	08 95       	ret

Disassembly of section .text.twi_start:

00000198 <twi_start>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 198:	84 ea       	ldi	r24, 0xA4	; 164
 19a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 19e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1a2:	88 23       	and	r24, r24
 1a4:	e4 f7       	brge	.-8      	; 0x19e <twi_start+0x6>
}
 1a6:	08 95       	ret

Disassembly of section .text.twi_stop:

000001b4 <twi_stop>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1b4:	84 e9       	ldi	r24, 0x94	; 148
 1b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1ba:	08 95       	ret

Disassembly of section .text.twi_tx:

00000184 <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 184:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 188:	84 e8       	ldi	r24, 0x84	; 132
 18a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 18e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 192:	88 23       	and	r24, r24
 194:	e4 f7       	brge	.-8      	; 0x18e <twi_tx+0xa>
}
 196:	08 95       	ret

Disassembly of section .text.wait:

00000166 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	08 c0       	rjmp	.+16     	; 0x17c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	ef ec       	ldi	r30, 0xCF	; 207
 16e:	f7 e0       	ldi	r31, 0x07	; 7
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <wait+0xa>
 174:	00 c0       	rjmp	.+0      	; 0x176 <wait+0x10>
 176:	00 00       	nop
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
 180:	ac f3       	brlt	.-22     	; 0x16c <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 182:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	
	twi_init();		// Init TWI interface
  a4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
  a8:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
  ac:	80 ee       	ldi	r24, 0xE0	; 224
  ae:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_stop();
  b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>

	twi_start();
  bc:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  c0:	80 ee       	ldi	r24, 0xE0	; 224
  c2:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
  c6:	80 ea       	ldi	r24, 0xA0	; 160
  c8:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_stop();
  cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>

	twi_start();
  d0:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  d4:	80 ee       	ldi	r24, 0xE0	; 224
  d6:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
  da:	83 ee       	ldi	r24, 0xE3	; 227
  dc:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_stop();
  e0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>

	twi_start();
  e4:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  e8:	80 ee       	ldi	r24, 0xE0	; 224
  ea:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
  ee:	81 e8       	ldi	r24, 0x81	; 129
  f0:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
	twi_stop();
  f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>


for (int i=0; i<17; i++)
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	0e c0       	rjmp	.+28     	; 0x11a <main+0x76>
{
		twi_start();
  fe:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 102:	80 ee       	ldi	r24, 0xE0	; 224
 104:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
		twi_tx(0x00);	// Address
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
		twi_tx(0x00);	// data
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
		twi_stop();
 114:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();


for (int i=0; i<17; i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c1 31       	cpi	r28, 0x11	; 17
 11c:	d1 05       	cpc	r29, r1
 11e:	7c f3       	brlt	.-34     	; 0xfe <main+0x5a>
		twi_tx(0x00);	// data
		twi_stop();
}
	while (1)
	{
				twi_start();
 120:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
 124:	80 ee       	ldi	r24, 0xE0	; 224
 126:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
				twi_tx(0x00);	// Address
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
				twi_tx(0x00);	// data
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
				twi_stop();
 136:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>

				wait(500);
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 b3 00 	call	0x166	; 0x166 <wait>

				twi_start();
 142:	0e 94 cc 00 	call	0x198	; 0x198 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
 146:	80 ee       	ldi	r24, 0xE0	; 224
 148:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
				twi_tx(0x00);	// Address
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
				twi_tx(0x01);	// data
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 c2 00 	call	0x184	; 0x184 <twi_tx>
				twi_stop();
 158:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_stop>

				wait(500);
 15c:	84 ef       	ldi	r24, 0xF4	; 244
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 b3 00 	call	0x166	; 0x166 <wait>
 164:	dd cf       	rjmp	.-70     	; 0x120 <main+0x7c>
