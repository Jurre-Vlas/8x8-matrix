
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000237  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d63  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000087c  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f3  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ea  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00002053  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001b0  000001b0  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.twi_init 0000000c  0000019c  0000019c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.twi_start 00000010  0000018c  0000018c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_stop 00000008  000001a8  000001a8  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_tx  00000014  00000178  00000178  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.wait    0000001e  0000015a  0000015a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.start_init 00000086  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000030  0000012a  0000012a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  7c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  80:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  84:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.twi_init:

0000019c <twi_init>:
outputs:	
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 19c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1a6:	08 95       	ret

Disassembly of section .text.twi_start:

0000018c <twi_start>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 18c:	84 ea       	ldi	r24, 0xA4	; 164
 18e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 192:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 196:	88 23       	and	r24, r24
 198:	e4 f7       	brge	.-8      	; 0x192 <twi_start+0x6>
}
 19a:	08 95       	ret

Disassembly of section .text.twi_stop:

000001a8 <twi_stop>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1a8:	84 e9       	ldi	r24, 0x94	; 148
 1aa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1ae:	08 95       	ret

Disassembly of section .text.twi_tx:

00000178 <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 178:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 17c:	84 e8       	ldi	r24, 0x84	; 132
 17e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 182:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 186:	88 23       	and	r24, r24
 188:	e4 f7       	brge	.-8      	; 0x182 <twi_tx+0xa>
}
 18a:	08 95       	ret

Disassembly of section .text.wait:

0000015a <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	08 c0       	rjmp	.+16     	; 0x170 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	ef ec       	ldi	r30, 0xCF	; 207
 162:	f7 e0       	ldi	r31, 0x07	; 7
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <wait+0xa>
 168:	00 c0       	rjmp	.+0      	; 0x16a <wait+0x10>
 16a:	00 00       	nop
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	ac f3       	brlt	.-22     	; 0x160 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 176:	08 95       	ret

Disassembly of section .text.start_init:

000000a4 <start_init>:



void start_init(void){
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	
	twi_init();		// Init TWI interface
  a8:	0e 94 ce 00 	call	0x19c	; 0x19c <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
  ac:	0e 94 c6 00 	call	0x18c	; 0x18c <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
  b0:	80 ee       	ldi	r24, 0xE0	; 224
  b2:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  b6:	81 e2       	ldi	r24, 0x21	; 33
  b8:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_stop();
  bc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_stop>

	twi_start();
  c0:	0e 94 c6 00 	call	0x18c	; 0x18c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  c4:	80 ee       	ldi	r24, 0xE0	; 224
  c6:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
  ca:	80 ea       	ldi	r24, 0xA0	; 160
  cc:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_stop();
  d0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_stop>

	twi_start();
  d4:	0e 94 c6 00 	call	0x18c	; 0x18c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  d8:	80 ee       	ldi	r24, 0xE0	; 224
  da:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
  de:	83 ee       	ldi	r24, 0xE3	; 227
  e0:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_stop();
  e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_stop>

	twi_start();
  e8:	0e 94 c6 00 	call	0x18c	; 0x18c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
  ec:	80 ee       	ldi	r24, 0xE0	; 224
  ee:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
  f2:	81 e8       	ldi	r24, 0x81	; 129
  f4:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_stop();
  f8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_stop>
	
	
	//dimming all leds
	twi_start();
  fc:	0e 94 c6 00 	call	0x18c	; 0x18c <twi_start>
	twi_tx(0xE0);	
 100:	80 ee       	ldi	r24, 0xE0	; 224
 102:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	twi_tx(0x00);	
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	for(int i=0; i < 16; i++){	
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	04 c0       	rjmp	.+8      	; 0x11a <start_init+0x76>
	twi_tx(0x00);	// data
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
	
	//dimming all leds
	twi_start();
	twi_tx(0xE0);	
	twi_tx(0x00);	
	for(int i=0; i < 16; i++){	
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c0 31       	cpi	r28, 0x10	; 16
 11c:	d1 05       	cpc	r29, r1
 11e:	cc f3       	brlt	.-14     	; 0x112 <start_init+0x6e>
	twi_tx(0x00);	// data
	}
	
	twi_stop();
 120:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_stop>
	
	
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

Disassembly of section .text.main:

0000012a <main>:


int main( void )
{
	
	start_init();
 12a:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
	
	while (1)
	{

				wait(500);
 12e:	84 ef       	ldi	r24, 0xF4	; 244
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 ad 00 	call	0x15a	; 0x15a <wait>

				twi_start();
 136:	0e 94 c6 00 	call	0x18c	; 0x18c <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
 13a:	80 ee       	ldi	r24, 0xE0	; 224
 13c:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
				twi_tx(0x00);	// Address
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
				twi_tx(0x01);	// data
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 bc 00 	call	0x178	; 0x178 <twi_tx>
				twi_stop();
 14c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_stop>

				wait(2000);
 150:	80 ed       	ldi	r24, 0xD0	; 208
 152:	97 e0       	ldi	r25, 0x07	; 7
 154:	0e 94 ad 00 	call	0x15a	; 0x15a <wait>
 158:	ea cf       	rjmp	.-44     	; 0x12e <main+0x4>
