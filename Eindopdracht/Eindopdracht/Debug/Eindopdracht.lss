
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000380  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  000003af  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000017ab  00000000  00000000  0000045f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a42  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007b1  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000148  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a1  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002f0  00000000  00000000  000031e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  000034d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000328  00000328  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000355c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  000002ac  000002ac  00000300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 0000003e  00000240  00000240  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.wait    0000001e  000002d2  000002d2  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002e  0000027e  0000027e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_init 0000000c  00000314  00000314  00000368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.twi_start 00000010  00000304  00000304  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.twi_stop 00000008  00000320  00000320  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.twi_tx  00000014  000002f0  000002f0  00000344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.start_init 00000086  000001ba  000001ba  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.decision 00000116  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
   8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
   c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  10:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  14:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  18:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  20:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  24:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  28:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  30:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  34:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  38:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  40:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  44:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  48:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  4c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  50:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  54:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  58:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  5c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  60:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  64:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  68:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  6c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  70:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  74:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  78:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  7c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  80:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  84:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  88:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000328 <__bad_interrupt>:
 328:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

000002ac <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
{
	PORTC |= (1<<LCD_E);	// E high
 2ac:	85 b3       	in	r24, 0x15	; 21
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	89 ef       	ldi	r24, 0xF9	; 249
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_strobe_lcd_e+0xa>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_strobe_lcd_e+0x10>
 2bc:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 2be:	85 b3       	in	r24, 0x15	; 21
 2c0:	87 7f       	andi	r24, 0xF7	; 247
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	89 ef       	ldi	r24, 0xF9	; 249
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_strobe_lcd_e+0x1c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcd_strobe_lcd_e+0x22>
 2ce:	00 00       	nop
 2d0:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000240 <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
 240:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 246:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 248:	c0 e2       	ldi	r28, 0x20	; 32
 24a:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 24c:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 250:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 252:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>
	PORTC = 0x80;
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 25a:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 25e:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 260:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 264:	80 ef       	ldi	r24, 0xF0	; 240
 266:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 268:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 26c:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 26e:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>
	PORTC = 0x60;
 272:	80 e6       	ldi	r24, 0x60	; 96
 274:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 276:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_strobe_lcd_e>

}
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

Disassembly of section .text.wait:

000002d2 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <wait+0x16>
 2d8:	ef ec       	ldi	r30, 0xCF	; 207
 2da:	f7 e0       	ldi	r31, 0x07	; 7
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <wait+0xa>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <wait+0x10>
 2e2:	00 00       	nop
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	ac f3       	brlt	.-22     	; 0x2d8 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 2ee:	08 95       	ret

Disassembly of section .text.main:

0000027e <main>:

int main( void )
{
	
	start_init();
 27e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <start_init>
	
	// Init I/O
	DDRE = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	82 b9       	out	0x02, r24	; 2

	// Init LCD
	init_4bits_mode();
 286:	0e 94 20 01 	call	0x240	; 0x240 <init_4bits_mode>


	
	while (1)
	{
			decision(1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
			wait(1000);
 292:	88 ee       	ldi	r24, 0xE8	; 232
 294:	93 e0       	ldi	r25, 0x03	; 3
 296:	0e 94 69 01 	call	0x2d2	; 0x2d2 <wait>
			
			decision(0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
			
			wait(1000);
 2a2:	88 ee       	ldi	r24, 0xE8	; 232
 2a4:	93 e0       	ldi	r25, 0x03	; 3
 2a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <wait>
 2aa:	ef cf       	rjmp	.-34     	; 0x28a <main+0xc>

Disassembly of section .text.twi_init:

00000314 <twi_init>:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
 314:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 318:	80 e2       	ldi	r24, 0x20	; 32
 31a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 31e:	08 95       	ret

Disassembly of section .text.twi_start:

00000304 <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
 304:	84 ea       	ldi	r24, 0xA4	; 164
 306:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 30a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 30e:	88 23       	and	r24, r24
 310:	e4 f7       	brge	.-8      	; 0x30a <twi_start+0x6>
}
 312:	08 95       	ret

Disassembly of section .text.twi_stop:

00000320 <twi_stop>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 320:	84 e9       	ldi	r24, 0x94	; 148
 322:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 326:	08 95       	ret

Disassembly of section .text.twi_tx:

000002f0 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 2f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 2f4:	84 e8       	ldi	r24, 0x84	; 132
 2f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 2fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2fe:	88 23       	and	r24, r24
 300:	e4 f7       	brge	.-8      	; 0x2fa <twi_tx+0xa>
}
 302:	08 95       	ret

Disassembly of section .text.start_init:

000001ba <start_init>:





void start_init(void){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	
	twi_init();		// Init TWI interface
 1be:	0e 94 8a 01 	call	0x314	; 0x314 <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 1c2:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1c6:	80 ee       	ldi	r24, 0xE0	; 224
 1c8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 1cc:	81 e2       	ldi	r24, 0x21	; 33
 1ce:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_stop();
 1d2:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>

	twi_start();
 1d6:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1da:	80 ee       	ldi	r24, 0xE0	; 224
 1dc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 1e0:	80 ea       	ldi	r24, 0xA0	; 160
 1e2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_stop();
 1e6:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>

	twi_start();
 1ea:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1ee:	80 ee       	ldi	r24, 0xE0	; 224
 1f0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 1f4:	83 ee       	ldi	r24, 0xE3	; 227
 1f6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_stop();
 1fa:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>

	twi_start();
 1fe:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 202:	80 ee       	ldi	r24, 0xE0	; 224
 204:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 208:	81 e8       	ldi	r24, 0x81	; 129
 20a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_stop();
 20e:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
	
	
	//dimming all leds
	twi_start();
 212:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
	twi_tx(0xE0);	
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	twi_tx(0x00);	
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	for(int i=0; i < 16; i++){	
 222:	c0 e0       	ldi	r28, 0x00	; 0
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	04 c0       	rjmp	.+8      	; 0x230 <start_init+0x76>
	twi_tx(0x00);	// data
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
	
	//dimming all leds
	twi_start();
	twi_tx(0xE0);	
	twi_tx(0x00);	
	for(int i=0; i < 16; i++){	
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	c0 31       	cpi	r28, 0x10	; 16
 232:	d1 05       	cpc	r29, r1
 234:	cc f3       	brlt	.-14     	; 0x228 <start_init+0x6e>
	twi_tx(0x00);	// data
	}
	
	twi_stop();
 236:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
	
	
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

Disassembly of section .text.decision:

000000a4 <decision>:

void decision(int good){
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	ec 01       	movw	r28, r24
	
				twi_start();
  aa:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
  ae:	80 ee       	ldi	r24, 0xE0	; 224
  b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0x00);	// Row
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0b0011110);	// data
  ba:	8e e1       	ldi	r24, 0x1E	; 30
  bc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_stop();
  c0:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
				
				twi_start();
  c4:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
  c8:	80 ee       	ldi	r24, 0xE0	; 224
  ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0x02);	// Row
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0b0100001);	// data
  d4:	81 e2       	ldi	r24, 0x21	; 33
  d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_stop();
  da:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
				
				twi_start();
  de:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
  e2:	80 ee       	ldi	r24, 0xE0	; 224
  e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0x04);	// Row
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0b11010010);	// data
  ee:	82 ed       	ldi	r24, 0xD2	; 210
  f0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_stop();
  f4:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
					
					
				twi_start();
  f8:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
  fc:	80 ee       	ldi	r24, 0xE0	; 224
  fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0x06);	// Row
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0b11000000);	// data
 108:	80 ec       	ldi	r24, 0xC0	; 192
 10a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_stop();
 10e:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
				
				
				if (good){
 112:	cd 2b       	or	r28, r29
 114:	d9 f0       	breq	.+54     	; 0x14c <decision+0xa8>
					twi_start();
 116:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 11a:	80 ee       	ldi	r24, 0xE0	; 224
 11c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0x08);	// Row
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0b11010010);	// data
 126:	82 ed       	ldi	r24, 0xD2	; 210
 128:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_stop();
 12c:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
					
					twi_start();
 130:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 134:	80 ee       	ldi	r24, 0xE0	; 224
 136:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0x0A);	// Row
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0b11001100);	// data
 140:	8c ec       	ldi	r24, 0xCC	; 204
 142:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_stop();
 146:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
 14a:	1a c0       	rjmp	.+52     	; 0x180 <decision+0xdc>
				}
				
				 else{			
					twi_start();
 14c:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 150:	80 ee       	ldi	r24, 0xE0	; 224
 152:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0x08);	// Row
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0b11001100);	// data
 15c:	8c ec       	ldi	r24, 0xCC	; 204
 15e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_stop();
 162:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
				
					twi_start();
 166:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 16a:	80 ee       	ldi	r24, 0xE0	; 224
 16c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0x0A);	// Row
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_tx(0b11010010);	// data
 176:	82 ed       	ldi	r24, 0xD2	; 210
 178:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
					twi_stop();
 17c:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
				
				}
				
				
				twi_start();
 180:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
 184:	80 ee       	ldi	r24, 0xE0	; 224
 186:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0x0C);	// Row
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0b0100001);	// data
 190:	81 e2       	ldi	r24, 0x21	; 33
 192:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_stop();
 196:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
				
				twi_start();
 19a:	0e 94 82 01 	call	0x304	; 0x304 <twi_start>
				twi_tx(0xE0);	// Display I2C addres + R/W bit
 19e:	80 ee       	ldi	r24, 0xE0	; 224
 1a0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0x0E);	// Row
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_tx(0b0011110);	// data
 1aa:	8e e1       	ldi	r24, 0x1E	; 30
 1ac:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_tx>
				twi_stop();			
 1b0:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret
